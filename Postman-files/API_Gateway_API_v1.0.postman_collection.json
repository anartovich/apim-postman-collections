{
	"info": {
		"_postman_id": "859b95bd-97a0-455b-a092-0a0220a1df0f",
		"name": "API Gateway API v1.0",
		"description": "Contact Support:\n Email: support@axway.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1181354"
	},
	"item": [
		{
			"name": "router/service/{instance}/api",
			"item": [
				{
					"name": "ama",
					"item": [
						{
							"name": "topics",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Create topic",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "Create the designated topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"destinationName\": \"<string>\",\n  \"destinationType\": \"<string>\",\n  \"messageCount\": \"<long>\",\n  \"enqueuesCount\": \"<long>\",\n  \"dequeuesCount\": \"<long>\",\n  \"consumersCount\": \"<long>\",\n  \"producersCount\": \"<long>\",\n  \"messagesCachedCount\": \"<long>\",\n  \"dispatchedCount\": \"<long>\",\n  \"inflightCount\": \"<long>\",\n  \"expiredCount\": \"<long>\"\n}"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete topic",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "Delete the designated topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List messages in a topic",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/messages?count=0&ago=<String>&field=veniam incididunt elit aliqua&field=elit magna ullamco minim&op=veniam incididunt elit aliqua&op=elit magna ullamco minim&value=veniam incididunt elit aliqua&value=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":id",
														"messages"
													],
													"query": [
														{
															"key": "count",
															"value": "0",
															"description": "(Required) Optional maximum number of elements to return"
														},
														{
															"key": "ago",
															"value": "<String>",
															"description": "(Required) Select elements with JMSTimestamp more recent than the given period"
														},
														{
															"key": "field",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "field",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "op",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "op",
															"value": "elit magna ullamco minim",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "value",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field value to check using the selected operation"
														},
														{
															"key": "value",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field value to check using the selected operation"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "List all messages in the targeted topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  },\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List consumers of a topic",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/consumers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":id",
														"consumers"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "List all consumers accessing the targeted topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/consumers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id",
																"consumers"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  },\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:id/consumers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":id",
																"consumers"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{qid}/messages",
									"item": [
										{
											"name": "{mid}",
											"item": [
												{
													"name": "Get message content",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid?getContent=-42651681",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages",
																":mid"
															],
															"query": [
																{
																	"key": "getContent",
																	"value": "-42651681",
																	"description": "(Required) Return message content (0: no, 1:yes, 2:truncated string if not binary content only)"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Read targeted message in the designated topic"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid?getContent=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"topics",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"query": [
																		{
																			"key": "getContent",
																			"value": "<integer>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Topic id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageData\": \"<object>\",\n  \"jmsreplyTo\": \"<string>\",\n  \"jmscorrelationID\": \"<string>\",\n  \"jmspriority\": \"<integer>\",\n  \"jmsproperties\": {\n    \"ex70\": \"<string>\"\n  },\n  \"jmsdeliveryMode\": \"<integer>\",\n  \"jmsexpiration\": \"<long>\",\n  \"jmsmessageID\": \"<string>\",\n  \"jmsredelivered\": \"<boolean>\",\n  \"jmstimestamp\": \"<long>\",\n  \"jmstype\": \"<string>\"\n}"
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid?getContent=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"topics",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"query": [
																		{
																			"key": "getContent",
																			"value": "<integer>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Topic id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get message data",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "User-Agent",
																"value": "<String>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid/body",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages",
																":mid",
																"body"
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Read data of targeted message in the designated topic"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	},
																	{
																		"key": "User-Agent",
																		"value": "<string>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid/body",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"topics",
																		":qid",
																		"messages",
																		":mid",
																		"body"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Topic id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	},
																	{
																		"key": "User-Agent",
																		"value": "<string>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages/:mid/body",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"topics",
																		":qid",
																		"messages",
																		":mid",
																		"body"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Topic id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Send message",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "messageType",
															"value": "BINARY",
															"description": "(Required) Message type: BINARY or TEXT (This can only be one of TEXT,BINARY)",
															"type": "text"
														},
														{
															"key": "messageData",
															"description": "(Required) Message content",
															"type": "file",
															"src": []
														},
														{
															"key": "jmsreplyTo",
															"value": "in d",
															"description": "(Required) JMS ReplyTo",
															"type": "text"
														},
														{
															"key": "jmsdeliveryMode",
															"value": "0",
															"description": "(Required) JMS DeliveryMode",
															"type": "text"
														},
														{
															"key": "jmscorrelationID",
															"value": "aliqua velit",
															"description": "(Required) JMS CorrelationID",
															"type": "text"
														},
														{
															"key": "jmspriority",
															"value": "0",
															"description": "(Required) JMS Priority",
															"type": "text"
														},
														{
															"key": "jmstype",
															"value": "elit cillum id",
															"description": "(Required) JMS Type",
															"type": "text"
														},
														{
															"key": "jmsexpiration",
															"value": "0",
															"type": "text"
														},
														{
															"key": "jmsredelivered",
															"value": "false",
															"type": "text"
														},
														{
															"key": "jmstimestamp",
															"value": "0",
															"type": "text"
														},
														{
															"key": "jmspropertyName",
															"value": "[\"veniam dolore nisi Lorem occaecat\",\"sed mollit consequat aute\"]",
															"description": "JMS property name",
															"type": "text"
														},
														{
															"key": "jmspropertyValue",
															"value": "[\"ut eiusmod officia elit\",\"magna\"]",
															"description": "JMS property value",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":qid",
														"messages"
													],
													"query": [
														{
															"key": "type",
															"value": "<String>",
															"description": "(Required) Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned"
														}
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "Send message in the designated topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Send message",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"messageType\": \"BINARY\",\n  \"messageSize\": 37117094,\n  \"messageData\": {},\n  \"jmsreplyTo\": \"officia laboris anim magna\",\n  \"jmscorrelationID\": \"ex adipisicing\",\n  \"jmspriority\": -66996783,\n  \"jmsproperties\": {\n    \"ipsum362\": \"ut Lor\"\n  },\n  \"jmsdeliveryMode\": 99196784,\n  \"jmsexpiration\": -96043328,\n  \"jmsmessageID\": \"ad ea Lorem dolor nisi\",\n  \"jmsredelivered\": true,\n  \"jmstimestamp\": 52856885,\n  \"jmstype\": \"consequat velit\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics",
														":qid",
														"messages"
													],
													"query": [
														{
															"key": "type",
															"value": "<String>",
															"description": "(Required) Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned"
														}
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "Send message in the designated topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"messageId\": \"<string>\",\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageTimestamp\": \"<long>\"\n}"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"topics",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List topics",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics?hideAdvisory=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"topics"
											],
											"query": [
												{
													"key": "hideAdvisory",
													"value": "false",
													"description": "(Required) Advanced display mode: if value is true, advisory topics will be also returned"
												}
											]
										},
										"description": "Get list of available topics"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/topics?hideAdvisory=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"topics"
													],
													"query": [
														{
															"key": "hideAdvisory",
															"value": "false"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  },\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "queues",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Create queue",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Create the designated queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"destinationName\": \"<string>\",\n  \"destinationType\": \"<string>\",\n  \"messageCount\": \"<long>\",\n  \"enqueuesCount\": \"<long>\",\n  \"dequeuesCount\": \"<long>\",\n  \"consumersCount\": \"<long>\",\n  \"producersCount\": \"<long>\",\n  \"messagesCachedCount\": \"<long>\",\n  \"dispatchedCount\": \"<long>\",\n  \"inflightCount\": \"<long>\",\n  \"expiredCount\": \"<long>\"\n}"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete queue",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Delete the designated queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List messages in a queue",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/messages?count=0&ago=<String>&field=veniam incididunt elit aliqua&field=elit magna ullamco minim&op=veniam incididunt elit aliqua&op=elit magna ullamco minim&value=veniam incididunt elit aliqua&value=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":id",
														"messages"
													],
													"query": [
														{
															"key": "count",
															"value": "0",
															"description": "(Required) Optional maximum number of elements to return"
														},
														{
															"key": "ago",
															"value": "<String>",
															"description": "(Required) Select elements with JMSTimestamp more recent than the given period"
														},
														{
															"key": "field",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "field",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "op",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "op",
															"value": "elit magna ullamco minim",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "value",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field value to check using the selected operation"
														},
														{
															"key": "value",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field value to check using the selected operation"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "List all messages in the targeted queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  },\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Purge messages in a queue",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/purge",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":id",
														"purge"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Purge all messages from targeted queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/purge",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"purge"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/purge",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"purge"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List consumers of  a queue",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/consumers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":id",
														"consumers"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "List all consumers accessing the targeted queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/consumers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"consumers"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  },\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:id/consumers",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":id",
																"consumers"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{qid}/messages",
									"item": [
										{
											"name": "{mid}",
											"item": [
												{
													"name": "Get message content",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid?getContent=-42651681",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages",
																":mid"
															],
															"query": [
																{
																	"key": "getContent",
																	"value": "-42651681",
																	"description": "(Required) Return message content (0: no, 1:yes, 2:truncated string if not binary content only)"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Read targeted message in the designated queue"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid?getContent=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"query": [
																		{
																			"key": "getContent",
																			"value": "<integer>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageData\": \"<object>\",\n  \"jmsreplyTo\": \"<string>\",\n  \"jmscorrelationID\": \"<string>\",\n  \"jmspriority\": \"<integer>\",\n  \"jmsproperties\": {\n    \"commodo_1\": \"<string>\"\n  },\n  \"jmsdeliveryMode\": \"<integer>\",\n  \"jmsexpiration\": \"<long>\",\n  \"jmsmessageID\": \"<string>\",\n  \"jmsredelivered\": \"<boolean>\",\n  \"jmstimestamp\": \"<long>\",\n  \"jmstype\": \"<string>\"\n}"
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid?getContent=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"query": [
																		{
																			"key": "getContent",
																			"value": "<integer>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Delete message",
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages",
																":mid"
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Delete targeted message in the designated queue"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Get message data",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "User-Agent",
																"value": "<String>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/body",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages",
																":mid",
																"body"
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Read data of targeted message in the designated queue"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	},
																	{
																		"key": "User-Agent",
																		"value": "<string>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/body",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"body"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	},
																	{
																		"key": "User-Agent",
																		"value": "<string>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/body",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"body"
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Move message from one queue to another",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/move?destination=<String>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages",
																":mid",
																"move"
															],
															"query": [
																{
																	"key": "destination",
																	"value": "<String>",
																	"description": "(Required) Destination queue name"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Move targeted message to the designated queue"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/move?destination=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"move"
																	],
																	"query": [
																		{
																			"key": "destination",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/move?destination=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"move"
																	],
																	"query": [
																		{
																			"key": "destination",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Copy message from one queue to another",
													"request": {
														"method": "POST",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/copy?destination=<String>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages",
																":mid",
																"copy"
															],
															"query": [
																{
																	"key": "destination",
																	"value": "<String>",
																	"description": "(Required) Destination queue name"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														},
														"description": "Copy targeted message to the designated queue"
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/copy?destination=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"copy"
																	],
																	"query": [
																		{
																			"key": "destination",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Error details returned in response",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages/:mid/copy?destination=<string>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"ama",
																		"queues",
																		":qid",
																		"messages",
																		":mid",
																		"copy"
																	],
																	"query": [
																		{
																			"key": "destination",
																			"value": "<string>"
																		}
																	],
																	"variable": [
																		{
																			"key": "qid",
																			"value": "<String>",
																			"description": "(Required) Queue id"
																		},
																		{
																			"key": "mid",
																			"value": "<String>",
																			"description": "(Required) Message id"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Send message",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "messageType",
															"value": "BINARY",
															"description": "(Required) Message type: BINARY or TEXT (This can only be one of TEXT,BINARY)",
															"type": "text"
														},
														{
															"key": "messageData",
															"description": "(Required) Message content",
															"type": "file",
															"src": []
														},
														{
															"key": "jmsreplyTo",
															"value": "laborum esse",
															"description": "(Required) JMS ReplyTo",
															"type": "text"
														},
														{
															"key": "jmsdeliveryMode",
															"value": "0",
															"description": "(Required) JMS DeliveryMode",
															"type": "text"
														},
														{
															"key": "jmscorrelationID",
															"value": "ipsum minim",
															"description": "(Required) JMS CorrelationID",
															"type": "text"
														},
														{
															"key": "jmspriority",
															"value": "0",
															"description": "(Required) JMS Priority",
															"type": "text"
														},
														{
															"key": "jmstype",
															"value": "mollit nostrud ullamco cillum officia",
															"description": "(Required) JMS Type",
															"type": "text"
														},
														{
															"key": "jmsexpiration",
															"value": "0",
															"type": "text"
														},
														{
															"key": "jmsredelivered",
															"value": "false",
															"type": "text"
														},
														{
															"key": "jmstimestamp",
															"value": "0",
															"type": "text"
														},
														{
															"key": "jmspropertyName",
															"value": "[\"ipsum commodo amet\",\"sunt\"]",
															"description": "JMS property name",
															"type": "text"
														},
														{
															"key": "jmspropertyValue",
															"value": "[\"Duis est\",\"veniam nisi sunt dolore exercitation\"]",
															"description": "JMS property value",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":qid",
														"messages"
													],
													"query": [
														{
															"key": "type",
															"value": "<String>",
															"description": "(Required) Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned"
														}
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Send message in the designated queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Send message",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageData\": \"<object>\",\n  \"jmsreplyTo\": \"<string>\",\n  \"jmscorrelationID\": \"<string>\",\n  \"jmspriority\": \"<integer>\",\n  \"jmsproperties\": {\n    \"occaecat_83\": \"<string>\",\n    \"culpa_aa4\": \"<string>\"\n  },\n  \"jmsdeliveryMode\": \"<integer>\",\n  \"jmsexpiration\": \"<long>\",\n  \"jmsmessageID\": \"<string>\",\n  \"jmsredelivered\": \"<boolean>\",\n  \"jmstimestamp\": \"<long>\",\n  \"jmstype\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues",
														":qid",
														"messages"
													],
													"query": [
														{
															"key": "type",
															"value": "<String>",
															"description": "(Required) Optional type parameter, if type is set to html then text/plain response compatible with dojo/request/iframe will be returned"
														}
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Send message in the designated queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"messageId\": \"<string>\",\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageTimestamp\": \"<long>\"\n}"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues/:qid/messages?type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"queues",
																":qid",
																"messages"
															],
															"query": [
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List queues",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"queues"
											]
										},
										"description": "Get list of available queues"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/queues",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"queues"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  },\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "tempqueues",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Delete temporary queue",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Delete the designated temporary queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List messages in a temporary queue",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/messages?count=0&ago=<String>&field=veniam incididunt elit aliqua&field=elit magna ullamco minim&op=veniam incididunt elit aliqua&op=elit magna ullamco minim&value=veniam incididunt elit aliqua&value=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues",
														":id",
														"messages"
													],
													"query": [
														{
															"key": "count",
															"value": "0",
															"description": "(Required) Optional maximum number of elements to return"
														},
														{
															"key": "ago",
															"value": "<String>",
															"description": "(Required) Select elements with JMSTimestamp more recent than the given period"
														},
														{
															"key": "field",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "field",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "op",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "op",
															"value": "elit magna ullamco minim",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "value",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field value to check using the selected operation"
														},
														{
															"key": "value",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field value to check using the selected operation"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "List all messages in the targeted temporary queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  },\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Purge messages in a temporary queue",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/purge",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues",
														":id",
														"purge"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "Purge all messages from targeted temporary queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/purge",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id",
																"purge"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:id/purge",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":id",
																"purge"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{qid}/messages/{mid}",
									"item": [
										{
											"name": "Get message content",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid?getContent=-42651681",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues",
														":qid",
														"messages",
														":mid"
													],
													"query": [
														{
															"key": "getContent",
															"value": "-42651681",
															"description": "(Required) Return message content (0: no, 1:yes, 2:truncated string if not binary content only)"
														}
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Queue id"
														},
														{
															"key": "mid",
															"value": "<String>",
															"description": "(Required) Message id"
														}
													]
												},
												"description": "Read targeted message in the designated temporary queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid?getContent=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":qid",
																"messages",
																":mid"
															],
															"query": [
																{
																	"key": "getContent",
																	"value": "<integer>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"messageType\": \"<string>\",\n  \"messageSize\": \"<long>\",\n  \"messageData\": \"<object>\",\n  \"jmsreplyTo\": \"<string>\",\n  \"jmscorrelationID\": \"<string>\",\n  \"jmspriority\": \"<integer>\",\n  \"jmsproperties\": {\n    \"commodo_1\": \"<string>\"\n  },\n  \"jmsdeliveryMode\": \"<integer>\",\n  \"jmsexpiration\": \"<long>\",\n  \"jmsmessageID\": \"<string>\",\n  \"jmsredelivered\": \"<boolean>\",\n  \"jmstimestamp\": \"<long>\",\n  \"jmstype\": \"<string>\"\n}"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid?getContent=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":qid",
																"messages",
																":mid"
															],
															"query": [
																{
																	"key": "getContent",
																	"value": "<integer>"
																}
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete message",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues",
														":qid",
														"messages",
														":mid"
													],
													"variable": [
														{
															"key": "qid",
															"value": "<String>",
															"description": "(Required) Queue id"
														},
														{
															"key": "mid",
															"value": "<String>",
															"description": "(Required) Message id"
														}
													]
												},
												"description": "Delete targeted message in the designated temporary queue"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":qid",
																"messages",
																":mid"
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues/:qid/messages/:mid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"tempqueues",
																":qid",
																"messages",
																":mid"
															],
															"variable": [
																{
																	"key": "qid",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																},
																{
																	"key": "mid",
																	"value": "<String>",
																	"description": "(Required) Message id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List temporary queues",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"tempqueues"
											]
										},
										"description": "Get list of available temporary queues"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/tempqueues",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"tempqueues"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  },\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "temptopics",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Delete temporary topic",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"temptopics",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Topic id"
														}
													]
												},
												"description": "Delete the designated temporary topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"temptopics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"temptopics",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Topic id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "List messages in a temporary topic",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id/messages?count=0&ago=<String>&field=veniam incididunt elit aliqua&field=elit magna ullamco minim&op=veniam incididunt elit aliqua&op=elit magna ullamco minim&value=veniam incididunt elit aliqua&value=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"temptopics",
														":id",
														"messages"
													],
													"query": [
														{
															"key": "count",
															"value": "0",
															"description": "(Required) Optional maximum number of elements to return"
														},
														{
															"key": "ago",
															"value": "<String>",
															"description": "(Required) Select elements with JMSTimestamp more recent than the given period"
														},
														{
															"key": "field",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "field",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field used to select elements"
														},
														{
															"key": "op",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "op",
															"value": "elit magna ullamco minim",
															"description": "(Required) The operation to apply to the selected field (eq, lt, gt, le, ge)"
														},
														{
															"key": "value",
															"value": "veniam incididunt elit aliqua",
															"description": "(Required) The field value to check using the selected operation"
														},
														{
															"key": "value",
															"value": "elit magna ullamco minim",
															"description": "(Required) The field value to check using the selected operation"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) Queue id"
														}
													]
												},
												"description": "List all messages in the targeted temporary topic"
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"temptopics",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  },\n  {\n    \"messageId\": \"<string>\",\n    \"messageType\": \"<string>\",\n    \"messageSize\": \"<long>\",\n    \"messageTimestamp\": \"<long>\"\n  }\n]"
												},
												{
													"name": "Error details returned in response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics/:id/messages?count=0&ago=<string>&field=<string>&field=<string>&op=<string>&op=<string>&value=<string>&value=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"ama",
																"temptopics",
																":id",
																"messages"
															],
															"query": [
																{
																	"key": "count",
																	"value": "0"
																},
																{
																	"key": "ago",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "field",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "op",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																},
																{
																	"key": "value",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<String>",
																	"description": "(Required) Queue id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "List temporary topics",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics?hideAdvisory=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"temptopics"
											],
											"query": [
												{
													"key": "hideAdvisory",
													"value": "false",
													"description": "(Required) Advanced display mode: if value is true, advisory topics will be also returned"
												}
											]
										},
										"description": "Get list of available temporary topics"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temptopics?hideAdvisory=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"temptopics"
													],
													"query": [
														{
															"key": "hideAdvisory",
															"value": "false"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  },\n  {\n    \"destinationName\": \"<string>\",\n    \"destinationType\": \"<string>\",\n    \"messageCount\": \"<long>\",\n    \"enqueuesCount\": \"<long>\",\n    \"dequeuesCount\": \"<long>\",\n    \"consumersCount\": \"<long>\",\n    \"producersCount\": \"<long>\",\n    \"messagesCachedCount\": \"<long>\",\n    \"dispatchedCount\": \"<long>\",\n    \"inflightCount\": \"<long>\",\n    \"expiredCount\": \"<long>\"\n  }\n]"
										}
									]
								}
							]
						},
						{
							"name": "subscribers",
							"item": [
								{
									"name": "List subscriber",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"subscribers"
											]
										},
										"description": "list existing durable subscriber"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"clientId\": \"<string>\",\n    \"subscriberName\": \"<string>\",\n    \"destination\": \"<string>\",\n    \"selector\": \"<string>\",\n    \"active\": \"<boolean>\"\n  },\n  {\n    \"clientId\": \"<string>\",\n    \"subscriberName\": \"<string>\",\n    \"destination\": \"<string>\",\n    \"selector\": \"<string>\",\n    \"active\": \"<boolean>\"\n  }\n]"
										},
										{
											"name": "Error details returned in response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create subscriber",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "clientId",
													"value": "<string>",
													"description": "Subscription client ID value"
												},
												{
													"key": "subscriberName",
													"value": "<string>",
													"description": "Subscription name value"
												},
												{
													"key": "destination",
													"value": "<string>",
													"description": "Subscription destination name"
												},
												{
													"key": "selector",
													"value": "<string>",
													"description": "Subscription message selector value"
												},
												{
													"key": "active",
													"value": "<boolean>",
													"description": "Indicates if subscription is active"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"subscribers"
											]
										},
										"description": "Create new durable subscription"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "clientId",
															"value": "<string>",
															"description": "Subscription client ID value"
														},
														{
															"key": "subscriberName",
															"value": "<string>",
															"description": "Subscription name value"
														},
														{
															"key": "destination",
															"value": "<string>",
															"description": "Subscription destination name"
														},
														{
															"key": "selector",
															"value": "<string>",
															"description": "Subscription message selector value"
														},
														{
															"key": "active",
															"value": "<boolean>",
															"description": "Indicates if subscription is active"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error details returned in response",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "clientId",
															"value": "<string>",
															"description": "Subscription client ID value"
														},
														{
															"key": "subscriberName",
															"value": "<string>",
															"description": "Subscription name value"
														},
														{
															"key": "destination",
															"value": "<string>",
															"description": "Subscription destination name"
														},
														{
															"key": "selector",
															"value": "<string>",
															"description": "Subscription message selector value"
														},
														{
															"key": "active",
															"value": "<boolean>",
															"description": "Indicates if subscription is active"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete subscriber",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers?clientId=<String>&subscriberName=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"subscribers"
											],
											"query": [
												{
													"key": "clientId",
													"value": "<String>",
													"description": "(Required) Subscriber client id"
												},
												{
													"key": "subscriberName",
													"value": "<String>",
													"description": "(Required) Subscription name"
												}
											]
										},
										"description": "Delete durable subscription"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers?clientId=<string>&subscriberName=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													],
													"query": [
														{
															"key": "clientId",
															"value": "<string>"
														},
														{
															"key": "subscriberName",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Error details returned in response",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/subscribers?clientId=<string>&subscriberName=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"ama",
														"subscribers"
													],
													"query": [
														{
															"key": "clientId",
															"value": "<string>"
														},
														{
															"key": "subscriberName",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get connection info",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/connections/:cid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"ama",
										"connections",
										":cid"
									],
									"variable": [
										{
											"key": "cid",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get details of active connection"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/connections/:cid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"connections",
												":cid"
											],
											"variable": [
												{
													"key": "cid",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"connectionId\": \"<string>\",\n  \"remoteAddress\": \"<string>\",\n  \"active\": \"<boolean>\",\n  \"connected\": \"<boolean>\",\n  \"blocked\": \"<boolean>\",\n  \"slow\": \"<boolean>\",\n  \"dispatchQueueSize\": \"<long>\",\n  \"consumers\": [\n    {\n      \"destinationType\": \"<string>\",\n      \"destinationName\": \"<string>\",\n      \"clientId\": \"<string>\",\n      \"connectionId\": \"<string>\",\n      \"sessionId\": \"<long>\",\n      \"enqueues\": \"<long>\",\n      \"dequeues\": \"<long>\",\n      \"dispatched\": \"<long>\",\n      \"dispatchedQueueSize\": \"<long>\",\n      \"prefetch\": \"<long>\",\n      \"maxPending\": \"<long>\",\n      \"exclusive\": \"<boolean>\",\n      \"retroactive\": \"<boolean>\",\n      \"selector\": \"<string>\"\n    },\n    {\n      \"destinationType\": \"<string>\",\n      \"destinationName\": \"<string>\",\n      \"clientId\": \"<string>\",\n      \"connectionId\": \"<string>\",\n      \"sessionId\": \"<long>\",\n      \"enqueues\": \"<long>\",\n      \"dequeues\": \"<long>\",\n      \"dispatched\": \"<long>\",\n      \"dispatchedQueueSize\": \"<long>\",\n      \"prefetch\": \"<long>\",\n      \"maxPending\": \"<long>\",\n      \"exclusive\": \"<boolean>\",\n      \"retroactive\": \"<boolean>\",\n      \"selector\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Error details returned in response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/connections/:cid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"connections",
												":cid"
											],
											"variable": [
												{
													"key": "cid",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get statistics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/statistics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"ama",
										"statistics"
									]
								},
								"description": "Get all statistics for all queues and topics"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"statistics"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"statistics\": {\n    \"culpa06\": {\n      \"cupidatat_72\": \"<string>\",\n      \"commodo02_\": \"<string>\"\n    },\n    \"mollit9\": {\n      \"minim602\": \"<string>\"\n    },\n    \"aliquip_b6\": {\n      \"fugiat_3c\": \"<string>\",\n      \"tempor3\": \"<string>\",\n      \"pariatur_fd\": \"<string>\"\n    },\n    \"laborum_aa8\": {\n      \"quisce7\": \"<string>\",\n      \"laborum91\": \"<string>\",\n      \"ipsum_5d\": \"<string>\"\n    }\n  }\n}"
								},
								{
									"name": "Error details returned in response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"statistics"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get service status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"ama",
										"status"
									]
								},
								"description": "Returns service status object, which included enabled field indicating if AMA service has been enabled or not"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"status"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"enabled\": \"<boolean>\",\n  \"memoryUsage\": \"<long>\",\n  \"memoryLimit\": \"<long>\",\n  \"storeUsage\": \"<long>\",\n  \"storeLimit\": \"<long>\",\n  \"tempUsage\": \"<long>\",\n  \"tempLimit\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Get message data",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "User-Agent",
										"value": "<String>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temp queues/:qid/messages/:mid/body",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"ama",
										"temp queues",
										":qid",
										"messages",
										":mid",
										"body"
									],
									"variable": [
										{
											"key": "qid",
											"value": "<String>",
											"description": "(Required) Queue id"
										},
										{
											"key": "mid",
											"value": "<String>",
											"description": "(Required) Message id"
										}
									]
								},
								"description": "Read data of targeted message in the designated temporary queue"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"key": "User-Agent",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temp queues/:qid/messages/:mid/body",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"temp queues",
												":qid",
												"messages",
												":mid",
												"body"
											],
											"variable": [
												{
													"key": "qid",
													"value": "<String>",
													"description": "(Required) Queue id"
												},
												{
													"key": "mid",
													"value": "<String>",
													"description": "(Required) Message id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Error details returned in response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"key": "User-Agent",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/temp queues/:qid/messages/:mid/body",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"temp queues",
												":qid",
												"messages",
												":mid",
												"body"
											],
											"variable": [
												{
													"key": "qid",
													"value": "<String>",
													"description": "(Required) Queue id"
												},
												{
													"key": "mid",
													"value": "<String>",
													"description": "(Required) Message id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all consumers",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/consumers?advanced=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"ama",
										"consumers"
									],
									"query": [
										{
											"key": "advanced",
											"value": "false",
											"description": "(Required) Advanced display mode: if value is true, remote brokers will be included in the result"
										}
									]
								},
								"description": "List all known active consumers"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/consumers?advanced=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"consumers"
											],
											"query": [
												{
													"key": "advanced",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  },\n  {\n    \"destinationType\": \"<string>\",\n    \"destinationName\": \"<string>\",\n    \"clientId\": \"<string>\",\n    \"connectionId\": \"<string>\",\n    \"sessionId\": \"<long>\",\n    \"enqueues\": \"<long>\",\n    \"dequeues\": \"<long>\",\n    \"dispatched\": \"<long>\",\n    \"dispatchedQueueSize\": \"<long>\",\n    \"prefetch\": \"<long>\",\n    \"maxPending\": \"<long>\",\n    \"exclusive\": \"<boolean>\",\n    \"retroactive\": \"<boolean>\",\n    \"selector\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Error details returned in response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/ama/consumers?advanced=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"ama",
												"consumers"
											],
											"query": [
												{
													"key": "advanced",
													"value": "false"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "configuration",
					"item": [
						{
							"name": "/router/service{{instance}}/api/configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration?archiveId=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration"
									],
									"query": [
										{
											"key": "archiveId",
											"value": "<String>"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration?archiveId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration"
											],
											"query": [
												{
													"key": "archiveId",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"status\": \"<boolean>\",\n    \"errorCount\": \"<integer>\",\n    \"failureReason\": \"<string>\",\n    \"traceData\": {\n      \"traceRecords\": [\n        {\n          \"dateTime\": \"<long>\",\n          \"level\": \"<integer>\",\n          \"message\": \"<string>\"\n        },\n        {\n          \"dateTime\": \"<long>\",\n          \"level\": \"<integer>\",\n          \"message\": \"<string>\"\n        }\n      ]\n    },\n    \"archiveId\": \"<string>\"\n  }\n}"
								}
							]
						},
						{
							"name": "Upload a configuration (Deployment Archive) to this API Gateway.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rootProperties\": {\n    \"voluptate_7e\": \"exercitation incididunt dolore eu\"\n  },\n  \"policyProperties\": {\n    \"labore_b\": \"tempor enim ea\",\n    \"Lorem_e\": \"mollit aute non\"\n  },\n  \"environmentProperties\": {\n    \"occaecatc\": \"irure ea \",\n    \"laborum1\": \"quis ipsum Excepteur est pariatur\"\n  },\n  \"data\": [\n    \"deserunt labore\",\n    \"tempor adipisicing nostrud irure\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration",
										"upload"
									]
								},
								"description": "Called by a client application to upload a new configuration (Deployment Archive) to an API Gateway that is running in EMT mode. This method must be followed by a call to load the new configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/upload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration",
												"upload"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the archive id of the API Server's currently loaded Deployment Archive.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/archiveId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration",
										"archiveId"
									]
								},
								"description": "Get the archive id of the API Server's currently loaded Deployment Archive.The same information can be retrieved from the Node Manager's Deployment API method GET /api/deployment/domain/deployments."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/archiveId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration",
												"archiveId"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the Deployment Archive currently deployed to this API Gateway.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/archive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration",
										"archive"
									]
								},
								"description": "Get the Deployment Archive currently deployed to this API Gateway."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/archive",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration",
												"archive"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"et_50\": \"<string>\",\n      \"ipsum23a\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
								}
							]
						},
						{
							"name": "Updates waf configuration",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/waf-update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration",
										"waf-update"
									]
								},
								"description": "Updates waf configuration"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/waf-update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration",
												"waf-update"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Method to set the in-memory passphrase.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oldPassphrase\": \"qui aliqua ipsum eiusmod eli\",\n  \"newPassphrase\": \"dolore Lorem minim\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/passphrase",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"configuration",
										"passphrase"
									]
								},
								"description": "Method to set the in-memory passphrase. This is called internally by the Node Manager's Deployment API when the group's passphrase is reset."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/configuration/passphrase",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"configuration",
												"passphrase"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"status\": \"<boolean>\",\n    \"errorCount\": \"<integer>\",\n    \"failureReason\": \"<string>\",\n    \"traceData\": {\n      \"traceRecords\": [\n        {\n          \"dateTime\": \"<long>\",\n          \"level\": \"<integer>\",\n          \"message\": \"<string>\"\n        },\n        {\n          \"dateTime\": \"<long>\",\n          \"level\": \"<integer>\",\n          \"message\": \"<string>\"\n        }\n      ]\n    },\n    \"archiveId\": \"<string>\"\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "discovery",
					"item": [
						{
							"name": "Lists all WSDL Web Services registered in the API Server.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/discovery/wsdl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"discovery",
										"wsdl"
									]
								},
								"description": "Lists all WSDL Web Services registered in the API Server. It will return the list of Web Services in Swagger format"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/discovery/wsdl",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"discovery",
												"wsdl"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  false,\n  null\n]"
								}
							]
						},
						{
							"name": "Lists all REST Web Services registered in the API Server.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/discovery/rest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"discovery",
										"rest"
									]
								},
								"description": "Lists all REST Web Services registered in the API Server. It will return the list of REST Web Services in Swagger format"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/discovery/rest",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"discovery",
												"rest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  null,\n  true\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/discovery/rest",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"discovery",
												"rest"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "domainaudit",
					"item": [
						{
							"name": "settings",
							"item": [
								{
									"name": "Returns audit off-load events settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/settings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"settings"
											]
										},
										"description": "Returns the domain audit off-load events settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/settings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"settings"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Returns the domain audit off-load events settings.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": false,\n  \"url\": \"reprehenderit sit labore\",\n  \"username\": \"dolore aliqua reprehenderit qui voluptate\",\n  \"password\": \"Lorem Exc\",\n  \"trustedPem\": \"in\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/settings?propagate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"settings"
											],
											"query": [
												{
													"key": "propagate",
													"value": "true"
												}
											]
										},
										"description": "Returns the domain audit off-load events settings."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"url\": \"<string>\",\n  \"username\": \"<string>\",\n  \"password\": \"<string>\",\n  \"trustedPem\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/settings?propagate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"settings"
													],
													"query": [
														{
															"key": "propagate",
															"value": "true"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "users",
							"item": [
								{
									"name": "Returns all User related events. You can optionally put a limit on the amount of messages returned",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"users"
											]
										},
										"description": "Returns the events of the users type. (Event ID in range 100-299). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"users"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/router/service{{instance}}/api/domainaudit/users/:num",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/users/:num",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"users",
												":num"
											],
											"variable": [
												{
													"key": "num",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/users/:num",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"users",
														":num"
													],
													"variable": [
														{
															"key": "num",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "organisations",
							"item": [
								{
									"name": "Returns all Organisation related events. You can optionally put a limit on the amount of messages returned",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/organisations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"organisations"
											]
										},
										"description": "Returns the events of the organisation type. (Event ID in range 300-499). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/organisations",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"organisations"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Returns all Organisation related events and {num} amount defined.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/organisations/:num",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"organisations",
												":num"
											],
											"variable": [
												{
													"key": "num",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns the events of the organisation type. {num} parameter returns a defined {num} number of the events."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/organisations/:num",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"organisations",
														":num"
													],
													"variable": [
														{
															"key": "num",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "applications",
							"item": [
								{
									"name": "Returns all Application related events. You can optionally put a limit on the amount of messages returned",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/applications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"applications"
											]
										},
										"description": "Returns the events of the application type. (Event ID in range 500-699). An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/applications",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"applications"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Returns all Application related events.The amount returned is defined but the {num} defined",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/applications/:num",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"applications",
												":num"
											],
											"variable": [
												{
													"key": "num",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns the events of the application type. (Event ID in range 500-699). A {num} parameter is set which returns a maximum number of the events."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/applications/:num",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"applications",
														":num"
													],
													"variable": [
														{
															"key": "num",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "{id}",
							"item": [
								{
									"name": "Returns all recorded events for a specified event ID. You can optionally put a limit on the amount of messages returned",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns the events of a given ID type. An optional {num} parameter can be set which returns a maximum number of the events. If this {num} parameter is not specified, a maximum number of 1000 events is returned."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Returns recorded events for a specified event ID and {num}",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/:id/:num",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												":id",
												":num"
											],
											"variable": [
												{
													"key": "id",
													"value": "-42651681",
													"description": "(Required) "
												},
												{
													"key": "num",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "Returns recorded events for a specified event ID and {num}"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/:id/:num",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														":id",
														":num"
													],
													"variable": [
														{
															"key": "id",
															"value": "-42651681",
															"description": "(Required) "
														},
														{
															"key": "num",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "events",
							"item": [
								{
									"name": "All audit events settings",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"events"
											]
										},
										"description": "Returns the domain audit events settings per category."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"events"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "All audit events settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"categories\": [\n    {\n      \"categoryName\": \"anim minim Excepteur culpa ipsum\",\n      \"events\": [\n        {\n          \"id\": -95655028,\n          \"desc\": \"ull\",\n          \"enabled\": false\n        },\n        {\n          \"id\": 66620524,\n          \"desc\": \"sint\",\n          \"enabled\": false\n        }\n      ]\n    },\n    {\n      \"categoryName\": \"consequat cupidatat\",\n      \"events\": [\n        {\n          \"id\": 28196971,\n          \"desc\": \"culpa sint Lorem proident\",\n          \"enabled\": false\n        },\n        {\n          \"id\": -3706084,\n          \"desc\": \"incididunt sit proident\",\n          \"enabled\": true\n        }\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events?propagate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"events"
											],
											"query": [
												{
													"key": "propagate",
													"value": "true"
												}
											]
										},
										"description": "Returns the domain audit events settings per category."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"categories\": [\n    {\n      \"categoryName\": \"<string>\",\n      \"events\": [\n        {\n          \"id\": \"<integer>\",\n          \"desc\": \"<string>\",\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events?propagate=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"events"
													],
													"query": [
														{
															"key": "propagate",
															"value": "true"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Refreshes audit events settings from server",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events/refresh",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"events",
												"refresh"
											]
										},
										"description": "Refreshes the domain audit events settings from disk."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/events/refresh",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"domainaudit",
														"events",
														"refresh"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/router/service{{instance}}/api/domainaudit",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit"
									]
								},
								"description": "Returns all the events. A maximum number of 1000 events is returned."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns the last {num} number of events of all types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/all/:num",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit",
										"all",
										":num"
									],
									"variable": [
										{
											"key": "num",
											"value": "-42651681",
											"description": "(Required) "
										}
									]
								},
								"description": "Returns the last {num} number of events of all events types."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/all/:num",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"all",
												":num"
											],
											"variable": [
												{
													"key": "num",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns all related events for a given user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/user/:user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit",
										"user",
										":user"
									],
									"variable": [
										{
											"key": "user",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Returns the events for a user given the user's name. A maximum number of 1000 events is returned"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/user/:user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"user",
												":user"
											],
											"variable": [
												{
													"key": "user",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns all recorded events with the given success or failure outcome",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/outcome/:outcome",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit",
										"outcome",
										":outcome"
									],
									"variable": [
										{
											"key": "outcome",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Returns all recorded events with the given success or failure outcome. A maximum number of 1000 events is returned."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/outcome/:outcome",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"outcome",
												":outcome"
											],
											"variable": [
												{
													"key": "outcome",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Querystring search for Domain Audit events. Optional parameters are count, beginId, endId, beginTimestamp, endTimestamp and ago",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/search?count=100&beginId=0&endId=0&beginTimestamp=0&endTimestamp=0&ago=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit",
										"search"
									],
									"query": [
										{
											"key": "count",
											"value": "100"
										},
										{
											"key": "beginId",
											"value": "0"
										},
										{
											"key": "endId",
											"value": "0"
										},
										{
											"key": "beginTimestamp",
											"value": "0"
										},
										{
											"key": "endTimestamp",
											"value": "0"
										},
										{
											"key": "ago",
											"value": "24h"
										}
									]
								},
								"description": "Performs a search through the Domain Audit events based on the following optional QueryString parameters. If a parameter is not specified in the request the default value in this table is used."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/search?count=100&beginId=0&endId=0&beginTimestamp=0&endTimestamp=0&ago=24h",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"search"
											],
											"query": [
												{
													"key": "count",
													"value": "100"
												},
												{
													"key": "beginId",
													"value": "0"
												},
												{
													"key": "endId",
													"value": "0"
												},
												{
													"key": "beginTimestamp",
													"value": "0"
												},
												{
													"key": "endTimestamp",
													"value": "0"
												},
												{
													"key": "ago",
													"value": "24h"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Logs roll-over and empty audit.log file",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/log/reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"domainaudit",
										"log",
										"reset"
									]
								},
								"description": "Resets/rolls-over the domain audit log file. Creates an empty domain audit log file."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/domainaudit/log/reset",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"domainaudit",
												"log",
												"reset"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "management",
					"item": [
						{
							"name": "cfgevents",
							"item": [
								{
									"name": "{event Handler}",
									"item": [
										{
											"name": "log",
											"item": [
												{
													"name": "/router/service{{instance}}/api/management/cfgevents/:eventHandler/log",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler/log",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"management",
																"cfgevents",
																":eventHandler",
																"log"
															],
															"variable": [
																{
																	"key": "eventHandler",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler/log",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"management",
																		"cfgevents",
																		":eventHandler",
																		"log"
																	],
																	"variable": [
																		{
																			"key": "eventHandler",
																			"value": "<String>",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "/router/service{{instance}}/api/management/cfgevents/:eventHandler/log",
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler/log?size=-42651681",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"management",
																"cfgevents",
																":eventHandler",
																"log"
															],
															"query": [
																{
																	"key": "size",
																	"value": "-42651681"
																}
															],
															"variable": [
																{
																	"key": "eventHandler",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"response": [
														{
															"name": "successful operation",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: basic",
																		"key": "Authorization",
																		"value": "Basic <credentials>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler/log?size=<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"router",
																		"service",
																		"{{instance}}",
																		"api",
																		"management",
																		"cfgevents",
																		":eventHandler",
																		"log"
																	],
																	"query": [
																		{
																			"key": "size",
																			"value": "<integer>"
																		}
																	],
																	"variable": [
																		{
																			"key": "eventHandler",
																			"value": "<String>",
																			"description": "(Required) "
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "text",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "text/plain"
																}
															],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "/router/service{{instance}}/api/management/cfgevents/:eventHandler",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"cfgevents",
														":eventHandler"
													],
													"variable": [
														{
															"key": "eventHandler",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents/:eventHandler",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"management",
																"cfgevents",
																":eventHandler"
															],
															"variable": [
																{
																	"key": "eventHandler",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "/router/service{{instance}}/api/management/cfgevents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"cfgevents"
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/cfgevents",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"cfgevents"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "servicename",
							"item": [
								{
									"name": "Get the service name",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicename",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"servicename"
											]
										},
										"description": "et the service name of the API Server or Node Manager. This is the name used to identify the process within the domain topology.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicename for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicename for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicename."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicename",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"servicename"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Update the in-memory service name.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicename?name=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"servicename"
											],
											"query": [
												{
													"key": "name",
													"value": "<String>"
												}
											]
										},
										"description": "Updates the in-memory service name of the API Server or Node Manager. This is the name used to identify the process within the domain topology.This method is called internally from the Node Manager's Topology API when a user updates an API Server or Node Manager name. This method should not normally be invoked any other way. This method will only update the in-memory service name of the API Server or Node Manager. For the update to be persisted into the topology, it must be done via the Topology API method PUT /api/topology/services/{groupID}.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicename for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicename for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicename."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicename?name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"servicename"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "groupname",
							"item": [
								{
									"name": "Get the group name.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/groupname",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"groupname"
											]
										},
										"description": "Get the name of the group that the API Server or Node Manager is running in. This is the name used to identify the group within the domain topology.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/groupname."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/groupname",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"groupname"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Update the in-memory group name.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/groupname?name=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"groupname"
											],
											"query": [
												{
													"key": "name",
													"value": "<String>"
												}
											]
										},
										"description": "Update the in-memory name of the group that the API Server or Node Manager is running in. This is the name used to identify the group within the domain topology.This method is called internally from the Node Manager's Topology API when a user updates a group name. This method should not normally be invoked any other way. This method will only update the in-memory group name of the API Server or Node Manager. For the update to be persisted into the topology, it must be done via the Topology API method PUT /api/topology/groups.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/groupname."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/groupname?name=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"management",
														"groupname"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get the service type.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicetype",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"servicetype"
									]
								},
								"description": "Get the service type of the API Server or Node Manager. This is an internal product type string identifier e.g. VordelGateway, VordelNodeManager etc.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/servicetype for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/servicetype for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/servicetype."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/servicetype",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"servicetype"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Stop a API Gateway Instance",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/stop/:groupID/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"stop",
										":groupID",
										":serviceID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Stop a Running API Gateway instance This method works synchronously so it will block until the APIGateway stops with success or it fails."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/stop/:groupID/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"stop",
												":groupID",
												":serviceID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Start a API Gateway Instance",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/start/:groupID/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"start",
										":groupID",
										":serviceID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Start a API Gateway instance This method works synchronously so it will block until the APIGateway starts the services with success or it fails."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/start/:groupID/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"start",
												":groupID",
												":serviceID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the Status of a API Gateway Instance",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/status/:groupID/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"status",
										":groupID",
										":serviceID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get the status of a API Gateway instanceThis method works synchronously so it will block until the APIGateway sends back its status."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/status/:groupID/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"status",
												":groupID",
												":serviceID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Returns the FIPS mode status for the instance",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/fips",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"fips"
									]
								},
								"description": "Returns the status of the FIPS mode for the Domain, the setting for the Instance, and the current running mode"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/fips",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"fips"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/fips",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"fips"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the service version.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/serviceversion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"serviceversion"
									]
								},
								"description": "Get the product version of the API Server or Node Manager.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/serviceversion for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/serviceversion for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/serviceversion."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/serviceversion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"serviceversion"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the domain id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/domainid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"domainid"
									]
								},
								"description": "Get the domain id of the domain that the API Server or Node Manager is running in. All API Servers and Node Managers in the same domain must have the same domain id value. The domain id is assigned when the Admin Node Manager is registered.The Management API resides in the API Servers, therefore this method must be invoked via the Routing API in the Admin Node Manager, e.g. https://localhost:8090/api/router/service/instance-1/api/management/domainid for an API Server instance, and https://localhost:8090/api/router/service/nodemanager-1/api/management/domainid for a Node Manager. It is possible to invoke the method directly on the Admin Node Manager i.e. https://localhost:8090/api/management/domainid."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/domainid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"domainid"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get details of the current product version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/productversion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"management",
										"productversion"
									]
								},
								"description": "Get details of the current product version"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/management/productversion",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"management",
												"productversion"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"fugiatc\": \"<object>\",\n    \"utc\": \"<object>\",\n    \"in_69c\": \"<object>\"\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "monitoring",
					"item": [
						{
							"name": "metrics",
							"item": [
								{
									"name": "Gets metric summary for a Metric Group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/summary?metricGroupType=SystemOverview&name=<String>&parentType=<String>&parentName=<String>&timeline=10m",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"metrics",
												"summary"
											],
											"query": [
												{
													"key": "metricGroupType",
													"value": "SystemOverview",
													"description": "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer"
												},
												{
													"key": "name",
													"value": "<String>",
													"description": "The metric group name. If the name is not specified, it sums all of the groups of the metricGroupType together."
												},
												{
													"key": "parentType",
													"value": "<String>"
												},
												{
													"key": "parentName",
													"value": "<String>"
												},
												{
													"key": "timeline",
													"value": "10m",
													"description": "The time window interval; one of 10m, 10h, 5d This defaults to *10m*."
												}
											]
										},
										"description": "This method gets metric totals for a Metric Group Type (or specific named group) for a time window. Totals metrics give a total count for the metric values since the API Server when started. Totals metrics may be used to give a summary of metric data. They should not be used to graph metric data over time. The set of values returned will depend on the type of the metric group, as different metrics are generated for different metric group types."
									},
									"response": [
										{
											"name": "Success. The response body contains a list of maps of metrics.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/summary?metricGroupType=SystemOverview&name=<string>&parentType=<string>&parentName=<string>&timeline=10m",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "metricGroupType",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														},
														{
															"key": "timeline",
															"value": "10m"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"gatewayId\": \"<string>\",\n      \"gatewayName\": \"<string>\",\n      \"gatewayGroupName\": \"<string>\",\n      \"groupType\": \"<string>\",\n      \"groupName\": \"<string>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"gatewayId\": \"<string>\",\n      \"gatewayName\": \"<string>\",\n      \"gatewayGroupName\": \"<string>\",\n      \"groupType\": \"<string>\",\n      \"groupName\": \"<string>\",\n      \"name\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/summary?metricGroupType=SystemOverview&name=<string>&parentType=<string>&parentName=<string>&timeline=10m",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"summary"
													],
													"query": [
														{
															"key": "metricGroupType",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														},
														{
															"key": "timeline",
															"value": "10m"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"code\": \"<integer>\",\n    \"message\": \"<string>\"\n  },\n  {\n    \"code\": \"<integer>\",\n    \"message\": \"<string>\"\n  }\n]"
										}
									]
								},
								{
									"name": "Gets metric totals for a Metric Group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/totals?type=SystemOverview&name=<String>&parentType=<String>&parentName=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"metrics",
												"totals"
											],
											"query": [
												{
													"key": "type",
													"value": "SystemOverview",
													"description": "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer\""
												},
												{
													"key": "name",
													"value": "<String>",
													"description": "The metric group name"
												},
												{
													"key": "parentType",
													"value": "<String>"
												},
												{
													"key": "parentName",
													"value": "<String>"
												}
											]
										},
										"description": "This method gets metric totals for a Metric Group. Metric totals are a running total count for the group since the API Server was started. The set of metric values returned will vary depending on the metric group type."
									},
									"response": [
										{
											"name": "Success. The response body contains a list of metric totals for a metric group of a particular type and name.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/totals?type=SystemOverview&name=<string>&parentType=<string>&parentName=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"totals"
													],
													"query": [
														{
															"key": "type",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"groupType\": \"<string>\",\n      \"groupId\": \"<string>\",\n      \"failures\": \"<string>\",\n      \"exceptions\": \"<string>\",\n      \"groupName\": \"<string>\",\n      \"successes\": \"<string>\"\n    },\n    {\n      \"groupType\": \"<string>\",\n      \"groupId\": \"<string>\",\n      \"failures\": \"<string>\",\n      \"exceptions\": \"<string>\",\n      \"groupName\": \"<string>\",\n      \"successes\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/totals?type=SystemOverview&name=<string>&parentType=<string>&parentName=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"totals"
													],
													"query": [
														{
															"key": "type",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Gets metric groups",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/groups?type=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"metrics",
												"groups"
											],
											"query": [
												{
													"key": "type",
													"value": "<String>",
													"description": "Filter the returned metric groups by type, e.g. \"Service\", \"Client\", \"TargetServe"
												}
											]
										},
										"description": "A Metric Group identifies some system entity for which we are recording a set of metrics, e.g a web service, an external API, an authenticated client, an external target server etc. This method will return a list of all Metric Groups currently being monitoring by the API Server."
									},
									"response": [
										{
											"name": "Success. The response body contains a list of metric groups. Refer to Javadoc for com.vordel.api.monitoring.model.MetricGroup.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/groups?type=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"groups"
													],
													"query": [
														{
															"key": "type",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"parentId\": \"<integer>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"parentId\": \"<integer>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Gets metric information",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/metrics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"metrics",
												"metrics"
											]
										},
										"description": "This method retrieves information about the metrics that are currently being monitored in the API Server memory. It includes total memory usage for realtime monitoring and total number of metric groups being tracked."
									},
									"response": [
										{
											"name": "An ApiResponse containing metrics metadata as the result on a successful operation.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/metrics",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"metrics"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"result\": [\n    {\n      \"monitoringEnabled\": \"<boolean>\",\n      \"totalMemoryUsedMB\": \"<double>\",\n      \"source\": \"<long>\",\n      \"metricGroupTypes\": [\n        \"<object>\",\n        \"<object>\"\n      ]\n    },\n    {\n      \"monitoringEnabled\": \"<boolean>\",\n      \"totalMemoryUsedMB\": \"<double>\",\n      \"source\": \"<long>\",\n      \"metricGroupTypes\": [\n        \"<object>\",\n        \"<object>\"\n      ]\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Gets metric timeline for a Metric Group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/timeline?metricGroupType=SystemOverview&name=<String>&parentType=<String>&parentName=<String>&metricType=successes&metricType=successes&timeline=10m&from=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"metrics",
												"timeline"
											],
											"query": [
												{
													"key": "metricGroupType",
													"value": "SystemOverview",
													"description": "The metric group type, e.g. \"Service\", \"Client\", \"TargetServer\". This defaults to *SystemOverview*."
												},
												{
													"key": "name",
													"value": "<String>",
													"description": "The metric group name. If the name is not specified, it sums all of the groups of the *metricGroupType* together."
												},
												{
													"key": "parentType",
													"value": "<String>"
												},
												{
													"key": "parentName",
													"value": "<String>"
												},
												{
													"key": "metricType",
													"value": "successes",
													"description": "The metric type name; multiple names can be specified for additional series. This defaults to *successes*"
												},
												{
													"key": "metricType",
													"value": "successes",
													"description": "The metric type name; multiple names can be specified for additional series. This defaults to *successes*"
												},
												{
													"key": "timeline",
													"value": "10m",
													"description": "The time window interval; one of 10m, 10h, 5d This defaults to *10m*"
												},
												{
													"key": "from",
													"value": "<String>",
													"description": "An ISO-8601 standard web date (e.g. 2012-04-11T14:09:50Z) or a reference (e.g. 5minutes) If not specified, it defaults to the full timeline interval."
												}
											]
										},
										"description": "Timeline metrics may be used to graph metric values over time. If real-time monitoring is enabled, the API Server maintains in-memory metrics for 3 timeline periods as follows:-\n\nthe last 10 minutes\nthe last 10 hours\nthe last 5 days\nFor each timeline period, 120 data points are maintained. This means:-\n\nfor the 10 minute timeline period, there is a data point every 5 seconds\nfor the 10 hour timeline period, there is a data point every 5 minutes\nfor the 5 day timeline period, there is a data point every 1 hour.\nThis means that the data is at its most fine-grained for the shortest timeline period"
									},
									"response": [
										{
											"name": "Success. The response body contains a list of maps of metrics.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/timeline?metricGroupType=SystemOverview&name=<string>&parentType=<string>&parentName=<string>&metricType=successes&metricType=successes&timeline=10m&from=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"timeline"
													],
													"query": [
														{
															"key": "metricGroupType",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														},
														{
															"key": "metricType",
															"value": "successes"
														},
														{
															"key": "metricType",
															"value": "successes"
														},
														{
															"key": "timeline",
															"value": "10m"
														},
														{
															"key": "from",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"series\": [\n      {\n        \"name\": \"<string>\",\n        \"pointInterval\": \"<long>\",\n        \"pointStart\": \"<long>\",\n        \"data\": [\n          \"<float>\",\n          \"<float>\"\n        ]\n      },\n      {\n        \"name\": \"<string>\",\n        \"pointInterval\": \"<long>\",\n        \"pointStart\": \"<long>\",\n        \"data\": [\n          \"<float>\",\n          \"<float>\"\n        ]\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Metrics are requested for a metric group that does not currently exist in memory, or, an attempt is made to request an unsupported timeline period.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/metrics/timeline?metricGroupType=SystemOverview&name=<string>&parentType=<string>&parentName=<string>&metricType=successes&metricType=successes&timeline=10m&from=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"monitoring",
														"metrics",
														"timeline"
													],
													"query": [
														{
															"key": "metricGroupType",
															"value": "SystemOverview"
														},
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "parentType",
															"value": "<string>"
														},
														{
															"key": "parentName",
															"value": "<string>"
														},
														{
															"key": "metricType",
															"value": "successes"
														},
														{
															"key": "metricType",
															"value": "successes"
														},
														{
															"key": "timeline",
															"value": "10m"
														},
														{
															"key": "from",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "Gets log, SLA, alert events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/events/:eventType",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"monitoring",
										"events",
										":eventType"
									],
									"variable": [
										{
											"key": "eventType",
											"value": "<String>",
											"description": "(Required) mandatory\tOne of: log, alert, or sla"
										}
									]
								},
								"description": "Gets a list of events."
							},
							"response": [
								{
									"name": "Success. The response body contains summary metrics data. Refer to Javadoc for com.vordel.api.monitoring.model.Summary.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/events/:eventType",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"events",
												":eventType"
											],
											"variable": [
												{
													"key": "eventType",
													"value": "<String>",
													"description": "(Required) mandatory\tOne of: log, alert, or sla"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": [\n    {\n      \"timestamp\": \"<string>\",\n      \"message\": \"<string>\",\n      \"source\": \"<string>\",\n      \"serverity\": \"<string>\",\n      \"messageId\": \"<string>\"\n    },\n    {\n      \"timestamp\": \"<string>\",\n      \"message\": \"<string>\",\n      \"source\": \"<string>\",\n      \"serverity\": \"<string>\",\n      \"messageId\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/events/:eventType",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"events",
												":eventType"
											],
											"variable": [
												{
													"key": "eventType",
													"value": "<String>",
													"description": "(Required) mandatory\tOne of: log, alert, or sla"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Gets summary metrics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"monitoring",
										"summary"
									]
								},
								"description": "This method retrieves summary API Server status information. This status information includes metrics totals for the API Server, e.g. the number of passed requests, failed requests and exception requests."
							},
							"response": [
								{
									"name": "Success. The response body contains summary metrics data.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/monitoring/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"monitoring",
												"summary"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"groupId\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"hostName\": \"<string>\",\n    \"summaryMetrics\": {\n      \"sit1e\": \"<object>\",\n      \"ea_840\": \"<object>\",\n      \"Duis_e3\": \"<object>\"\n    }\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "kps",
					"item": [
						{
							"name": "{store Alias}",
							"item": [
								{
									"name": "{object Id}",
									"item": [
										{
											"name": "Gets a Store object.",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias",
														":objectId"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "objectId",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Gets the specified object from the specified store."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"kps",
																":storeAlias",
																":objectId"
															],
															"variable": [
																{
																	"key": "storeAlias",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "objectId",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Creates an object with a client side generated id OR Updates an object.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"elit_cf6\": {}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias",
														":objectId"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "objectId",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Creates or updates an object.The primary ID is specified in the request.If the server generates the primary ID then the POST method should be used.For object creation, both the primary ID and the secondary ID (if defined) must be specified.For object update, the primary ID must be specified.Other properties are optional.To update a property specify its new value.To delete a property set the value to null.It is not currently possible to partially update a Map or a List property.All properties of the Map or List must be specified for this case."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"kps",
																":storeAlias",
																":objectId"
															],
															"variable": [
																{
																	"key": "storeAlias",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "objectId",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Deletes an object",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias",
														":objectId"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "objectId",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Deletes an object with a client side generated id"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias/:objectId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"router",
																"service",
																"{{instance}}",
																"api",
																"kps",
																":storeAlias",
																":objectId"
															],
															"variable": [
																{
																	"key": "storeAlias",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "objectId",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Filters Store objects",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias?filter=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												":storeAlias"
											],
											"query": [
												{
													"key": "filter",
													"value": "<String>",
													"description": "A query parameter named filter. If not specified then no filter is applied and all objects are returned. Format: \"/kps/{storeAlias}?filter={filter}\". E.g.: \"/kps/employees?filter=joe.\""
												}
											],
											"variable": [
												{
													"key": "storeAlias",
													"value": "<String>",
													"description": "(Required) Alias of store to get objects from."
												}
											]
										},
										"description": "This method returns objects in the specified table that match a specified filter. If any property in any object in the table contains the value of this filter then the object is included in the result set. List and Map object properties are converted to Strings before being compared. A case insensitive comparision is used.\n By default the method returns 100 records. Up to 1000 records can be retrieved using the HTTP header Range, 1000 being the max value for upper bound. The header specifies position of start and end object, inclusive, in the format: \"Range: items=start-end\". E.g.: \"Range: \"items=10-500\"."
									},
									"response": [
										{
											"name": "Success. The response body contains the required objects. NOTE: an empty array indicates that no objects were found. A Content-Range header specifies the start position, end position, and total number of objects found (max upper bound: 1000). Format: \"Con",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias?filter=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias"
													],
													"query": [
														{
															"key": "filter",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) Alias of store to get objects from."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fail. KPS has not been configured on this node or the specified store does not exist",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias?filter=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias"
													],
													"query": [
														{
															"key": "filter",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) Alias of store to get objects from."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Fail. An internal server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias?filter=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias"
													],
													"query": [
														{
															"key": "filter",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) Alias of store to get objects from."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Creates an object with server side generated id.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"elit_cf6\": {}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												":storeAlias"
											],
											"variable": [
												{
													"key": "storeAlias",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Creates an object where the the object id (primary key) is auto-generated on the server side.For client generated object id please use the PUT method.If a secondary key is defined for the store, values must be provided for all of its constituent properties.Other property values are optional."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/:storeAlias",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														":storeAlias"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "cursor",
							"item": [
								{
									"name": "Gets the next {batchSize} objects in a store.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/cursor/next/:cursorId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												"cursor",
												"next",
												":cursorId"
											],
											"variable": [
												{
													"key": "cursorId",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "This method can be used to iterate over rows in a KPS table. Filters can be applied to restrict the rows that are returned.Cursors are automatically closed after 10 minutes of inactivity in order to free resources on the server."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/cursor/next/:cursorId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														"cursor",
														"next",
														":cursorId"
													],
													"variable": [
														{
															"key": "cursorId",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Gets the first {batchSize} objects in a store.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/cursor/open/:batchSize/:storeAlias",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												"cursor",
												"open",
												":batchSize",
												":storeAlias"
											],
											"variable": [
												{
													"key": "batchSize",
													"value": "-42651681",
													"description": "(Required) "
												},
												{
													"key": "storeAlias",
													"value": "FqT@2(*N*",
													"description": "(Required) "
												}
											]
										},
										"description": "Gets the first {batchSize} objects in a store.This method can be used to iterate over rows in a KPS table. Filters can be applied to restrict the rows that are returned. Cursors are automatically closed after 10 minutes of inactivity in order to free resources on the server.\n\nExample: Suppose a cursor is opened with the following URL:\nhttps://localhost:8090/api/router/service/api-server-instance-id/api/kps/cursor/open/100/cities?name=yo&country=USA&country=france\n\\nThis retrieves rows from the 'cities' KPS table, where cities are filtered by name and country. The following points are worth noting:\n\\n* propName is case sensitive, so 'country' and 'Country' refer to different properties.\n* filterValue is case insensitive, so 'USA' and 'usa' are equivalent.\n* A match occurs if a property value *contains* the filterValue. So filter 'name=yo' will match rows where city name is New York, Lyon, etc.\n* A row is only returned if *ALL* property filters match. So if filter is 'name=yo&country=USA', a row will only be returned if both conditions are true.\n* If more than one filterValue is specified for a property, a row is returned if *ANY* of them match. So if filter is 'country=USA&country=france', a row will \nbe returned if the country is either USA or France."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/cursor/open/:batchSize/:storeAlias",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														"cursor",
														"open",
														":batchSize",
														":storeAlias"
													],
													"variable": [
														{
															"key": "batchSize",
															"value": "-42651681",
															"description": "(Required) "
														},
														{
															"key": "storeAlias",
															"value": "FqT@2(*N*",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "iterator",
							"item": [
								{
									"name": "Iterates through objects. Start iteration.",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/iterator/start/:storeAlias/:batchSize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												"iterator",
												"start",
												":storeAlias",
												":batchSize"
											],
											"variable": [
												{
													"key": "storeAlias",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "batchSize",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "THESE REST METHODS HAVE BEEN DEPRECATED. To iterate over the rows in a KPS table, use the cursor method instead./api/kps/iterator/start - Gets the first {batchSize} objects in a store./api/kps/iterator/next - Gets the next {batchSize} objects in a store.Note: These methods support one client per API Gateway at a time. Concurrent clients are not supported."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/iterator/start/:storeAlias/:batchSize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														"iterator",
														"start",
														":storeAlias",
														":batchSize"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "batchSize",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Iterates through objects. Next iteration",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/iterator/next/:storeAlias/:batchSize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												"iterator",
												"next",
												":storeAlias",
												":batchSize"
											],
											"variable": [
												{
													"key": "storeAlias",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "batchSize",
													"value": "-42651681",
													"description": "(Required) "
												}
											]
										},
										"description": "THESE REST METHODS HAVE BEEN DEPRECATED. To iterate over the rows in a KPS table, use the cursor method instead./api/kps/iterator/start - Gets the first {batchSize} objects in a store./api/kps/iterator/next - Gets the next {batchSize} objects in a store.Note: These methods support one client per API Gateway at a time. Concurrent clients are not supported."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/iterator/next/:storeAlias/:batchSize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"router",
														"service",
														"{{instance}}",
														"api",
														"kps",
														"iterator",
														"next",
														":storeAlias",
														":batchSize"
													],
													"variable": [
														{
															"key": "storeAlias",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "batchSize",
															"value": "-42651681",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "/router/service{{instance}}/api/kps",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"kps"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"version\": \"<string>\",\n  \"description\": \"<string>\",\n  \"types\": [\n    {\n      \"identity\": \"<string>\",\n      \"description\": \"<string>\",\n      \"properties\": {\n        \"est__73\": \"<object>\"\n      }\n    },\n    {\n      \"identity\": \"<string>\",\n      \"description\": \"<string>\",\n      \"properties\": {\n        \"voluptate_530\": \"<object>\",\n        \"velit_061\": \"<object>\",\n        \"ametce7\": \"<object>\"\n      }\n    }\n  ],\n  \"stores\": [\n    {\n      \"identity\": \"<string>\",\n      \"description\": \"<string>\",\n      \"typeId\": \"<string>\",\n      \"implId\": \"<string>\",\n      \"config\": {\n        \"quis7\": \"<object>\"\n      }\n    },\n    {\n      \"identity\": \"<string>\",\n      \"description\": \"<string>\",\n      \"typeId\": \"<string>\",\n      \"implId\": \"<string>\",\n      \"config\": {\n        \"Lorem_cb\": \"<object>\",\n        \"sit385\": \"<object>\"\n      }\n    }\n  ],\n  \"aliases\": [\n    {\n      \"alias\": \"<string>\",\n      \"identity\": \"<string>\"\n    },\n    {\n      \"alias\": \"<string>\",\n      \"identity\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Composite key query.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/ext/query/:storeAlias",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"router",
										"service",
										"{{instance}}",
										"api",
										"kps",
										"ext",
										"query",
										":storeAlias"
									],
									"variable": [
										{
											"key": "storeAlias",
											"value": "FqT@2(*N*",
											"description": "(Required) "
										}
									]
								},
								"description": "Composite key query. Retrieves a unique row from the specified KPS table given a query of the form: columnA=x&columnB=y& ..."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/router/service/{{instance}}/api/kps/ext/query/:storeAlias",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"router",
												"service",
												"{{instance}}",
												"api",
												"kps",
												"ext",
												"query",
												":storeAlias"
											],
											"variable": [
												{
													"key": "storeAlias",
													"value": "FqT@2(*N*",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "adminusers",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "{user ID}",
							"item": [
								{
									"name": "Get a particular admin user",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<String>",
													"description": "(Required) The id of the admin user to retrieve"
												}
											]
										},
										"description": "Get a particular admin user"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The id of the admin user to retrieve"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n]"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The id of the admin user to retrieve"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The id of the admin user to retrieve"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updates an admin user.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"adminUser\": {\n    \"id\": \"user-5\",\n    \"name\": \"admin\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"password\": \"changeit\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<String>",
													"description": "(Required) The admin user to be updated"
												}
											]
										},
										"description": "Update an admin user's roles, or password. It is possible to update the user roles without updating the password, (leave out the password in the request body). It is possible to update the user's password only, (leave out the adminUser in the request body). It is possible to update the user's roles and password at the same time. The id or name of a user cannot be updated.The password is sent in the clear in the request body, but this will be sent over SSL. The password is encrypted before being written to the Admin User Store, i.e. the VDISTDIR/conf/adminUsers.json file."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be updated"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n]"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be updated"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be updated"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be updated"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Deletes an admin user.",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/:userID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												":userID"
											],
											"variable": [
												{
													"key": "userID",
													"value": "<String>",
													"description": "(Required) The admin user to be deleted"
												}
											]
										},
										"description": "Deletes an admin user."
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be deleted"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be deleted"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be deleted"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/users/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"users",
														":userID"
													],
													"variable": [
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) The admin user to be deleted"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all admin users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"users"
									]
								},
								"description": "Get all admin users"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create an admin user.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"adminUser\": {\n    \"id\": \"user-5\",\n    \"name\": \"admin\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  \"password\": \"changeit\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"users"
									]
								},
								"description": "Create an admin user. The password is sent in the clear in the request body, but this will be sent over SSL. The password is encrypted before being written to the Admin User Store, i.e. the VDISTDIR/conf/adminUsers.json file."
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n]"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reset logged-in user password.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "oldPassword",
											"value": "dolore sunt pariatur",
											"description": "(Required) The user's old password"
										},
										{
											"key": "newPassword",
											"value": "commodo",
											"description": "(Required) The user's new password"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/users/password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"users",
										"password"
									]
								},
								"description": "Modify the password of the authenticated user."
							},
							"response": [
								{
									"name": "No Content",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "oldPassword",
													"value": "<string>",
													"description": "(Required) The user's old password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The user's new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												"password"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "oldPassword",
													"value": "<string>",
													"description": "(Required) The user's old password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The user's new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												"password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "oldPassword",
													"value": "<string>",
													"description": "(Required) The user's old password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The user's new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												"password"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "oldPassword",
													"value": "<string>",
													"description": "(Required) The user's old password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The user's new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												"password"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "oldPassword",
													"value": "<string>",
													"description": "(Required) The user's old password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The user's new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/users/password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"users",
												"password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "passwordpolicy",
					"item": [
						{
							"name": "Returns the current password policy for admin users.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers/passwordpolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"passwordpolicy"
									]
								},
								"description": "Returns the current password policy for admin users."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"enabled\": \"<boolean>\",\n    \"assertions\": [\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      },\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      }\n    ],\n    \"version\": \"<integer>\",\n    \"dataVersion\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  },\n  {\n    \"enabled\": \"<boolean>\",\n    \"assertions\": [\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      },\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      }\n    ],\n    \"version\": \"<integer>\",\n    \"dataVersion\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  }\n]"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Save password policy for admin users on disk",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": false,\n  \"assertions\": [\n    {\n      \"description\": \"password composition\",\n      \"matchCount\": \"*\",\n      \"enabled\": true,\n      \"assertion\": [\n        {\n          \"enabled\": false\n        },\n        {\n          \"enabled\": false\n        }\n      ]\n    },\n    {\n      \"description\": \"password composition\",\n      \"matchCount\": \"*\",\n      \"enabled\": true,\n      \"assertion\": [\n        {\n          \"enabled\": false\n        },\n        {\n          \"enabled\": false\n        }\n      ]\n    }\n  ],\n  \"version\": 1,\n  \"dataVersion\": \"7.4.1\",\n  \"timestamp\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/passwordpolicy?propagateStore=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"passwordpolicy"
									],
									"query": [
										{
											"key": "propagateStore",
											"value": "true"
										}
									]
								},
								"description": "Save password policy for admin users on disk"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"description\": \"<string>\",\n  \"matchCount\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"assertion\": [\n    {\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/passwordpolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"passwordpolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "roles",
					"item": [
						{
							"name": "{role ID}",
							"item": [
								{
									"name": "Get a particular admin user role.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles/:roleID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles",
												":roleID"
											],
											"variable": [
												{
													"key": "roleID",
													"value": "<String>",
													"description": "(Required) The role to be returned"
												}
											]
										},
										"description": "Get a particular admin user role."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be returned"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  }\n]"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be returned"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be returned"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Deletes a role.",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles/:roleID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles",
												":roleID"
											],
											"variable": [
												{
													"key": "roleID",
													"value": "<String>",
													"description": "(Required) The role to be deleted"
												}
											]
										},
										"description": "Deletes a role."
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be deleted"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be deleted"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be deleted"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/adminusers/roles/:roleID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adminusers",
														"roles",
														":roleID"
													],
													"variable": [
														{
															"key": "roleID",
															"value": "<String>",
															"description": "(Required) The role to be deleted"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all admin user roles.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"roles"
									]
								},
								"description": "Get all admin user roles."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create an admin user role.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"role-5\",\n  \"name\": \"API Server Administrator\",\n  \"displayName\": \"API Gateway Administrator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/roles",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"roles"
									]
								},
								"description": "Create an admin user role."
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"displayName\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"displayName\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"displayName\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"displayName\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/roles",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"roles"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "advisorybanner",
					"item": [
						{
							"name": "/adminusers/advisorybanner",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/adminusers/advisorybanner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"advisorybanner"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adminusers/advisorybanner",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"advisorybanner"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/adminusers/advisorybanner",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bannerEnabled\": true,\n  \"bannerText\": \"id\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/advisorybanner?propagate=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"advisorybanner"
									],
									"query": [
										{
											"key": "propagate",
											"value": "true"
										}
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bannerEnabled\": \"<boolean>\",\n  \"bannerText\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/adminusers/advisorybanner?propagate=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adminusers",
												"advisorybanner"
											],
											"query": [
												{
													"key": "propagate",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Get the admin users store",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/adminusers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"adminusers"
							]
						},
						"description": "Get the admin users store"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"productVersion\": \"<string>\",\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\",\n    \"adminUsers\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"adminUserCredentials\": {\n      \"qui_c\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      },\n      \"nulla_f\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      }\n    },\n    \"adminUserRoles\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      }\n    ],\n    \"uniqueIdCounters\": {\n      \"adipisicing_a16\": \"<integer>\"\n    },\n    \"adminUsersVersion\": {\n      \"version\": \"<integer>\",\n      \"timestamp\": \"<long>\"\n    }\n  },\n  {\n    \"productVersion\": \"<string>\",\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\",\n    \"adminUsers\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"adminUserCredentials\": {\n      \"consequat1_9\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      }\n    },\n    \"adminUserRoles\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      }\n    ],\n    \"uniqueIdCounters\": {\n      \"aliquip_6\": \"<integer>\",\n      \"consequat_ab\": \"<integer>\"\n    },\n    \"adminUsersVersion\": {\n      \"version\": \"<integer>\",\n      \"timestamp\": \"<long>\"\n    }\n  }\n]"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Updates the Admin User Store on disk.",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"productVersion\": \"7.2.0\",\n  \"version\": 1,\n  \"timestamp\": 0,\n  \"adminUsers\": [\n    {\n      \"id\": \"user-5\",\n      \"name\": \"admin\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"id\": \"user-5\",\n      \"name\": \"admin\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ],\n  \"adminUserCredentials\": {\n    \"Excepteurbe\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": 0\n    },\n    \"magna2c2\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": 0\n    },\n    \"minim5c7\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": 0\n    }\n  },\n  \"adminUserRoles\": [\n    {\n      \"id\": \"role-5\",\n      \"name\": \"API Server Administrator\",\n      \"displayName\": \"API Gateway Administrator\"\n    },\n    {\n      \"id\": \"role-5\",\n      \"name\": \"API Server Administrator\",\n      \"displayName\": \"API Gateway Administrator\"\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"esse86_\": \"<integer>\",\n    \"eiusmod_15\": \"<integer>\",\n    \"mollit7\": \"<integer>\"\n  },\n  \"adminUsersVersion\": {\n    \"version\": 1,\n    \"timestamp\": 0\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/adminusers?propagateStore=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"adminusers"
							],
							"query": [
								{
									"key": "propagateStore",
									"value": "true"
								}
							]
						},
						"description": "Updates the Admin User Store on disk. Used to replicate version across Node Managers"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\",\n  \"adminUsers\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ],\n  \"adminUserCredentials\": {\n    \"nulla_cef\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"adminUserRoles\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"displayName\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"displayName\": \"<string>\"\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"eua\": \"<integer>\"\n  },\n  \"adminUsersVersion\": {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers?propagateStore=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers"
									],
									"query": [
										{
											"key": "propagateStore",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"productVersion\": \"<string>\",\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\",\n    \"adminUsers\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"adminUserCredentials\": {\n      \"enim_3\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      }\n    },\n    \"adminUserRoles\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      }\n    ],\n    \"uniqueIdCounters\": {\n      \"laboris_0_\": \"<integer>\",\n      \"nisi_7\": \"<integer>\",\n      \"id_8d_\": \"<integer>\"\n    },\n    \"adminUsersVersion\": {\n      \"version\": \"<integer>\",\n      \"timestamp\": \"<long>\"\n    }\n  },\n  {\n    \"productVersion\": \"<string>\",\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\",\n    \"adminUsers\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"roles\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ],\n    \"adminUserCredentials\": {\n      \"Loreme9\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      },\n      \"in1\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      },\n      \"adipisicing_50\": {\n        \"passwordHistory\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"passwordTimestamp\": \"<long>\"\n      }\n    },\n    \"adminUserRoles\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"displayName\": \"<string>\"\n      }\n    ],\n    \"uniqueIdCounters\": {\n      \"nostrud03\": \"<integer>\",\n      \"dolor488\": \"<integer>\"\n    },\n    \"adminUsersVersion\": {\n      \"version\": \"<integer>\",\n      \"timestamp\": \"<long>\"\n    }\n  }\n]"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\",\n  \"adminUsers\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"roles\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ],\n  \"adminUserCredentials\": {\n    \"nulla_cef\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"adminUserRoles\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"displayName\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"displayName\": \"<string>\"\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"eua\": \"<integer>\"\n  },\n  \"adminUsersVersion\": {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers?propagateStore=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers"
									],
									"query": [
										{
											"key": "propagateStore",
											"value": "true"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get the version of the admin user store",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/adminusers/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"adminusers",
								"version"
							]
						},
						"description": "Get the admin users store"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  },\n  {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  }\n]"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adminusers/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"version"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Validates if the supplied password is strong enough according to the active password policy.",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"admin\",\n  \"oldPassword\": \"foobar\",\n  \"newPassword\": \"foobar123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/adminusers/strongpassword",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"adminusers",
								"strongpassword"
							]
						},
						"description": "Validates if the supplied password is strong enough according to the active password policy."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"oldPassword\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/strongpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"strongpassword"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"failed\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"passed\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"oldPassword\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/strongpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"strongpassword"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"<string>\",\n  \"oldPassword\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/adminusers/strongpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adminusers",
										"strongpassword"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "deployment",
			"item": [
				{
					"name": "archive",
					"item": [
						{
							"name": "{group ID}/{archive ID}",
							"item": [
								{
									"name": "Download a Deployment Archive.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/:groupID/:archiveID?local=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												":groupID",
												":archiveID"
											],
											"query": [
												{
													"key": "local",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get a deployment archive. The archive must be deployed to at least one API Server in the domain."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/:groupID/:archiveID?local=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														":groupID",
														":archiveID"
													],
													"query": [
														{
															"key": "local",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "archiveID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
										}
									]
								},
								{
									"name": "Update Deployment Archive manifest properties.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fugiat1_8\": \"deserunt labore\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/:groupID/:archiveID/properties/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												":groupID",
												":archiveID",
												"properties",
												":type"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "type",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Update Deployment Archive manifest properties. This method will ensure that the properties are updated on all hosts that have this Deployment Archive on disk for the group. Note that the existing properties are completely overwritten. Updates to read-only properties e.g. Id, Timestamp, are ignored.The configuration content is not updated. Configuration refresh requests are not sent to the API Servers."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/:groupID/:archiveID/properties/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														":groupID",
														":archiveID",
														"properties",
														":type"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "archiveID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "type",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "policy",
							"item": [
								{
									"name": "Download a Policy Archive.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/policy/:groupID/:archiveID?local=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												"policy",
												":groupID",
												":archiveID"
											],
											"query": [
												{
													"key": "local",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get a Policy Archive from a deployed Deployment Archive. The Deployment Archive must be deployed to at least one API Server in the domain."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/policy/:groupID/:archiveID?local=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														"policy",
														":groupID",
														":archiveID"
													],
													"query": [
														{
															"key": "local",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "archiveID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
										}
									]
								},
								{
									"name": "Download the Policy Archive deployed to an API Server.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/policy/service/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												"policy",
												"service",
												":serviceID"
											],
											"variable": [
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "SGet the Policy Archive currently deployed to an API Server."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/policy/service/:serviceID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														"policy",
														"service",
														":serviceID"
													],
													"variable": [
														{
															"key": "serviceID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "environment",
							"item": [
								{
									"name": "Download an Environment Archive.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/environment/:groupID/:archiveID?local=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												"environment",
												":groupID",
												":archiveID"
											],
											"query": [
												{
													"key": "local",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get an Environment Archive from a deployed Deployment Archive. The Deployment Archive must be deployed to at least one API Server in the domain"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/environment/:groupID/:archiveID?local=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														"environment",
														":groupID",
														":archiveID"
													],
													"query": [
														{
															"key": "local",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "archiveID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
										}
									]
								},
								{
									"name": "Download the Environment Archive deployed to an API Server.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/environment/service/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												"environment",
												"service",
												":serviceID"
											],
											"variable": [
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get the Environment Archive currently deployed to an API Server."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/archive/environment/service/:serviceID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"archive",
														"environment",
														"service",
														":serviceID"
													],
													"variable": [
														{
															"key": "serviceID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Download the Deployment Archive deployed to an API Server.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/archive/service/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"archive",
										"service",
										":serviceID"
									],
									"variable": [
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get the Deployment Archive currently deployed to an API Server."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/archive/service/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"archive",
												"service",
												":serviceID"
											],
											"variable": [
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"rootProperties\": {\n      \"non_c_\": \"<string>\",\n      \"ut501\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "{transaction Id}",
					"item": [
						{
							"name": "Commits deployment transaction identified by transactionId",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/:transactionId/commit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										":transactionId",
										"commit"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Commits deployment transaction identified by transactionId"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/:transactionId/commit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												":transactionId",
												"commit"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Adds tag with name and value to a transaction identified by transactionId",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/:transactionId/tag/:name/:value",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										":transactionId",
										"tag",
										":name",
										":value"
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "name",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "value",
											"value": "xGCc",
											"description": "(Required) "
										}
									]
								},
								"description": "Adds tag with name and value to a transaction identified by transactionId"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/:transactionId/tag/:name/:value",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												":transactionId",
												"tag",
												":name",
												":value"
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "name",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "value",
													"value": "xGCc",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Uploads a file to a transaction identified by transactionId",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/:transactionId/upload?type=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										":transactionId",
										"upload"
									],
									"query": [
										{
											"key": "type",
											"value": "<String>"
										}
									],
									"variable": [
										{
											"key": "transactionId",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Uploads a file to a transaction identified by transactionId"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/:transactionId/upload?type=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												":transactionId",
												"upload"
											],
											"query": [
												{
													"key": "type",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "transactionId",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "envsettings",
					"item": [
						{
							"name": "Download an Environment Archive.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/envsettings/:groupID/:archiveID?local=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"envsettings",
										":groupID",
										":archiveID"
									],
									"query": [
										{
											"key": "local",
											"value": "false"
										}
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "archiveID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get the environmentalized settings for a Deployment Archive."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/envsettings/:groupID/:archiveID?local=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"envsettings",
												":groupID",
												":archiveID"
											],
											"query": [
												{
													"key": "local",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"environmentalizedEntities\": [\n      {\n        \"entityPk\": \"<string>\",\n        \"type\": \"<string>\",\n        \"keyDescription\": \"<string>\",\n        \"environmentalizedFields\": [\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      {\n        \"entityPk\": \"<string>\",\n        \"type\": \"<string>\",\n        \"keyDescription\": \"<string>\",\n        \"environmentalizedFields\": [\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}"
								}
							]
						},
						{
							"name": "Download the Deployment Archive deployed to an API Server.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/envsettings/service/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"envsettings",
										"service",
										":serviceID"
									],
									"variable": [
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get the environmentalized settings for an API Server."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/envsettings/service/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"envsettings",
												"service",
												":serviceID"
											],
											"variable": [
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"environmentalizedEntities\": [\n      {\n        \"entityPk\": \"<string>\",\n        \"type\": \"<string>\",\n        \"keyDescription\": \"<string>\",\n        \"environmentalizedFields\": [\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      },\n      {\n        \"entityPk\": \"<string>\",\n        \"type\": \"<string>\",\n        \"keyDescription\": \"<string>\",\n        \"environmentalizedFields\": [\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"entityFieldName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"index\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"value\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"displayName\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "passphrase",
					"item": [
						{
							"name": "local",
							"item": [
								{
									"name": "Update the passphrase for a group's Deployment Archives.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"oldPassphrase\": \"qui aliqua ipsum eiusmod eli\",\n  \"newPassphrase\": \"dolore Lorem minim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/passphrase/local/group/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"passphrase",
												"local",
												"group",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "This method updates the passphrase for a group's Deployment Archives.This method is called on the Admin Node Manager which ensures that the passphrase is updated for all archives for the group on all hosts. It ensures that the group.xml secret is updated on all hosts. It also ensures that the certs.xml is encrypted with the new passphrase for all API Server instances."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/passphrase/local/group/:groupID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"passphrase",
														"local",
														"group",
														":groupID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update the entity store passphrase for that Node Manager",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"oldPassphrase\": \"qui aliqua ipsum eiusmod eli\",\n  \"newPassphrase\": \"dolore Lorem minim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/passphrase/local/nodemanager",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"passphrase",
												"local",
												"nodemanager"
											]
										},
										"description": "This method is called by an Admin Node Manager on a remote Node Manager to update the entity store passphrase for that Node Manager. When the entity store passphrase for the Node Manager is updated, the Node Managers entity store must be re-encrypted, and the secret in the nodemanager.xml must be updated.This method should not be called by client app. A client app should call the /passphrase/nodemanager/{serviceID} method to update the passphrase of any Node Manager in the domain."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/deployment/passphrase/local/nodemanager",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"passphrase",
														"local",
														"nodemanager"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Update the passphrase for a group's Deployment Archives.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oldPassphrase\": \"qui aliqua ipsum eiusmod eli\",\n  \"newPassphrase\": \"dolore Lorem minim\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/passphrase/group/:groupID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"passphrase",
										"group",
										":groupID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "This method updates the passphrase for a group's Deployment Archives.This method is called on the Admin Node Manager which ensures that the passphrase is updated for all archives for the group on all hosts. It ensures that the group.xml secret is updated on all hosts. It also ensures that the certs.xml is encrypted with the new passphrase for all API Server instances."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/passphrase/group/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"passphrase",
												"group",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update the passphrase for a Node Manager's configuration.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oldPassphrase\": \"qui aliqua ipsum eiusmod eli\",\n  \"newPassphrase\": \"dolore Lorem minim\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/passphrase/nodemanager/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"passphrase",
										"nodemanager",
										":serviceID"
									],
									"variable": [
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Update the passphrase for a Node Manager's configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/passphrase/nodemanager/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"passphrase",
												"nodemanager",
												":serviceID"
											],
											"variable": [
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "group",
					"item": [
						{
							"name": "configuration",
							"item": [
								{
									"name": "{group ID}",
									"item": [
										{
											"name": "Upload a configuration (Deployment Archive) for a group of API Servers.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rootProperties\": {\n    \"ut_ec2\": \"Ut pariatur do\",\n    \"seda7\": \"nisi anim\",\n    \"non_8\": \"sint adipisicing Excepteur\"\n  },\n  \"policyProperties\": {\n    \"Excepteur08\": \"ut voluptate nisi\",\n    \"proident_7_6\": \"reprehenderit deserunt\",\n    \"qui_4_\": \"veniam consectetur\"\n  },\n  \"environmentProperties\": {\n    \"nostrud4a\": \"culpa\",\n    \"Duisae\": \"cillum adipisicing officia sint nisi\"\n  },\n  \"data\": [\n    \"officia elit cupidatat\",\n    \"commodo labore\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/deployment/group/configuration/:groupID?serviceID=veniam incididunt elit aliqua&serviceID=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"group",
														"configuration",
														":groupID"
													],
													"query": [
														{
															"key": "serviceID",
															"value": "veniam incididunt elit aliqua"
														},
														{
															"key": "serviceID",
															"value": "elit magna ullamco minim"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Called by the client application to upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration."
											},
											"response": [
												{
													"name": "No Content",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/:groupID?serviceID=<string>&serviceID=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																":groupID"
															],
															"query": [
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "serviceID",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/:groupID?serviceID=<string>&serviceID=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																":groupID"
															],
															"query": [
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "serviceID",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Delete a configuration",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/deployment/group/configuration/:groupID?usedArchiveID=veniam incididunt elit aliqua&usedArchiveID=elit magna ullamco minim",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"group",
														"configuration",
														":groupID"
													],
													"query": [
														{
															"key": "usedArchiveID",
															"value": "veniam incididunt elit aliqua"
														},
														{
															"key": "usedArchiveID",
															"value": "elit magna ullamco minim"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete a configuration (Deployment Archive) for a group of API Servers"
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/:groupID?usedArchiveID=<string>&usedArchiveID=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																":groupID"
															],
															"query": [
																{
																	"key": "usedArchiveID",
																	"value": "<string>"
																},
																{
																	"key": "usedArchiveID",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "file",
									"item": [
										{
											"name": "Upload a configuration (Deployment Archive) file as multipart/form-data for a group of API Servers.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/deployment/group/configuration/file/:groupID?serviceID=veniam incididunt elit aliqua&serviceID=elit magna ullamco minim&CSRF-Token=<String>&type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"group",
														"configuration",
														"file",
														":groupID"
													],
													"query": [
														{
															"key": "serviceID",
															"value": "veniam incididunt elit aliqua"
														},
														{
															"key": "serviceID",
															"value": "elit magna ullamco minim"
														},
														{
															"key": "CSRF-Token",
															"value": "<String>"
														},
														{
															"key": "type",
															"value": "<String>"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Called by the client application to upload a new configuration file (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/file/:groupID?serviceID=<string>&serviceID=<string>&CSRF-Token=<string>&type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																"file",
																":groupID"
															],
															"query": [
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "CSRF-Token",
																	"value": "<string>"
																},
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Upload a Policy Archive as multipart/form-data for a group of API Servers.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "policyFile",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/deployment/group/configuration/file/policy/:groupID?CSRF-Token=<String>&type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"group",
														"configuration",
														"file",
														"policy",
														":groupID"
													],
													"query": [
														{
															"key": "CSRF-Token",
															"value": "<String>"
														},
														{
															"key": "type",
															"value": "<String>"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "A client application may need to deploy a separate Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, e.g. a web-based application, as it cannot merge the .pol and .env to create a Deployment Archve (.fed) locally. For a .pol and .env deployment, the API method described here must be invoked as Step 1.The steps for deployment of a Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, (when the client application cannot merge the .pol and .env to create a .fed), are as follows:-Step 1: Upload the Policy Archive by invoking the method described here. The Node Manager copies the Policy Archive to its local disk. This method returns the id of the Policy Archive to the client application. The policy archive id must be passed in Step 2 of the .pol and .env deployment as the query string parameter relatedPolicyArchiveID.Step 2: Upload the Environment Archive, by invoking POST /api/deployment/group/configuration/file/environment/{groupID}. The Node Manager creates a merged Deployment Archive and replicates it to all hosts running API Servers in the group. This method returns the id of the Deployment Archive to the client application. The Deployment Archive id must be passed in Step 3 of the .pol and .env deployment.Step 3: Invoke the Configuration API method PUT /api/configuration?archiveId={archiveId} on each API Server in the group via the Routing API in the Node Manager to get the API Server to load the new configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "policyFile",
																	"type": "file",
																	"src": []
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/file/policy/:groupID?CSRF-Token=<string>&type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																"file",
																"policy",
																":groupID"
															],
															"query": [
																{
																	"key": "CSRF-Token",
																	"value": "<string>"
																},
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Upload an Environment Archive as multipart/form-data for a group of API Servers. This is merged with a related Policy Archive to create a Deployment Archive.",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "environmentFile",
															"type": "file",
															"src": []
														},
														{
															"key": "passphrase",
															"value": "temp",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/deployment/group/configuration/file/environment/:groupID?relatedPolicyArchiveID=<String>&serviceID=veniam incididunt elit aliqua&serviceID=elit magna ullamco minim&CSRF-Token=<String>&type=<String>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"deployment",
														"group",
														"configuration",
														"file",
														"environment",
														":groupID"
													],
													"query": [
														{
															"key": "relatedPolicyArchiveID",
															"value": "<String>"
														},
														{
															"key": "serviceID",
															"value": "veniam incididunt elit aliqua"
														},
														{
															"key": "serviceID",
															"value": "elit magna ullamco minim"
														},
														{
															"key": "CSRF-Token",
															"value": "<String>"
														},
														{
															"key": "type",
															"value": "<String>"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "A client application may need to deploy a separate Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, e.g. a web-based application, as it cannot merge the .pol and .env to create a Deployment Archve (.fed) locally. For a .pol and .env deployment, the API method described here must be invoked as Step 2.The steps for deployment of a Policy Archive (.pol) and Environment Archive (.env) to a group of API Servers, (when the client application cannot merge the .pol and .env to create a .fed), are as follows:-Step 1: Upload the Policy Archive by invoking POST /api/deployment/group/configuration/file/policy/{groupID}. The Node Manager copies the Policy Archive to its local disk. This method returns the id of the Policy Archive to the client application. The policy archive id must be passed in Step 2 of the .pol and .env deployment as the query string parameter relatedPolicyArchiveID.Step 2: Upload the Environment Archive, by invoking the method described here. The Node Manager creates a merged Deployment Archive and replicates it to all hosts running API Servers in the group. This method returns the id of the Deployment Archive to the client application. The Deployment Archive id must be passed in Step 3 of the .pol and .env deployment.Step 3: Invoke the Configuration API method PUT /api/configuration?archiveId={archiveId} on each API Server in the group via the Routing API in the Node Manager to get the API Server to load the new configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "environmentFile",
																	"type": "file",
																	"src": []
																},
																{
																	"key": "passphrase",
																	"value": "<string>",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/deployment/group/configuration/file/environment/:groupID?relatedPolicyArchiveID=<string>&serviceID=<string>&serviceID=<string>&CSRF-Token=<string>&type=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"deployment",
																"group",
																"configuration",
																"file",
																"environment",
																":groupID"
															],
															"query": [
																{
																	"key": "relatedPolicyArchiveID",
																	"value": "<string>"
																},
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "serviceID",
																	"value": "<string>"
																},
																{
																	"key": "CSRF-Token",
																	"value": "<string>"
																},
																{
																	"key": "type",
																	"value": "<string>"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Gets a file from the group conf directory.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/group/conf/:groupID/:filename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"group",
										"conf",
										":groupID",
										":filename"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "filename",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "This method gets a file from the group conf directory.This method is used by managedomain when a new host is added to the domain to get group-related files for the new host. This is an internal method. It is read-only so not harmful, but does return sensitive data."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/group/conf/:groupID/:filename",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"group",
												"conf",
												":groupID",
												":filename"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "filename",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "local",
					"item": [
						{
							"name": "Upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rootProperties\": {\n    \"ut_ec2\": \"Ut pariatur do\",\n    \"seda7\": \"nisi anim\",\n    \"non_8\": \"sint adipisicing Excepteur\"\n  },\n  \"policyProperties\": {\n    \"Excepteur08\": \"ut voluptate nisi\",\n    \"proident_7_6\": \"reprehenderit deserunt\",\n    \"qui_4_\": \"veniam consectetur\"\n  },\n  \"environmentProperties\": {\n    \"nostrud4a\": \"culpa\",\n    \"Duisae\": \"cillum adipisicing officia sint nisi\"\n  },\n  \"data\": [\n    \"officia elit cupidatat\",\n    \"commodo labore\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/local/configuration/:groupID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"local",
										"configuration",
										":groupID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Called by the client application to upload a new configuration (Deployment Archive) to all hosts that run API Servers in the group that this configuration is destined for. This method must be called before the client can invoke the Configuration API in the API Servers (via Node Manager) to load the new configuration."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/local/configuration/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"local",
												"configuration",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns all details of all the deployed configurations on that local host",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/local/deployments?cleanupPending=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"local",
										"deployments"
									],
									"query": [
										{
											"key": "cleanupPending",
											"value": "false"
										}
									]
								},
								"description": "This method is called by an Admin Node Manager on a remote Node Manager. It returns all details of all the deployed configurations on that local host. The actual configuration is not returned, only metadata relating to it.While this is an internal type of method it would be OK for a customer to call, as it is only reading data.The swagger tools does not seems to show details of the object returned so I think its a bit useless in this case. This Map<String, List ServiceDeploymentArchiveDetails seems to show up as an Object."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/local/deployments?cleanupPending=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"local",
												"deployments"
											],
											"query": [
												{
													"key": "cleanupPending",
													"value": "false"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"ametc\": [\n      {\n        \"rootProperties\": {\n          \"aute8\": \"<string>\",\n          \"tempor_4\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"estf\": \"<string>\",\n          \"sintb4\": \"<string>\",\n          \"elit_97\": \"<string>\",\n          \"elit38\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"fugiatc\": \"<string>\",\n          \"eiusmod9\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      {\n        \"rootProperties\": {\n          \"cupidatat_5\": \"<string>\",\n          \"eiusmod_74\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"ut6\": \"<string>\",\n          \"ipsum_dd5\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"fugiat1_7\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      }\n    ],\n    \"laboreae\": [\n      {\n        \"rootProperties\": {\n          \"non505\": \"<string>\",\n          \"eiusmodb\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"aliquac12\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"in_b19\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      {\n        \"rootProperties\": {\n          \"dolore8\": \"<string>\",\n          \"etdf5\": \"<string>\",\n          \"quis88\": \"<string>\",\n          \"in_651\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"officia_33\": \"<string>\",\n          \"dolor_50\": \"<string>\",\n          \"reprehenderit_15\": \"<string>\",\n          \"doloref9\": \"<string>\",\n          \"qui_078\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"ullamcodf\": \"<string>\",\n          \"sint_f\": \"<string>\",\n          \"sed5\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      }\n    ]\n  }\n}"
								}
							]
						},
						{
							"name": "Update metadata relating to a configuration for a group on the local host.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fugiat1_8\": \"deserunt labore\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/local/:groupID/archive/:archiveID/properties/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"local",
										":groupID",
										"archive",
										":archiveID",
										"properties",
										":type"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "archiveID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "type",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "This method is called by an Admin Node Manager on a remote Node Manager.  This method is used to update metadata relating to a configuration for a group on the local host. Calling this method does *not* result in a redeployment of the configuration to the API Gateways in the group. The metadata that can be updated are the set of properties that are related to policy or the environment parts of the configuration.This method should not be called by client app. A client app should call /archive/{groupID}/{archiveID}/properties/{type} method to update configuration metadata."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/local/:groupID/archive/:archiveID/properties/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"local",
												":groupID",
												"archive",
												":archiveID",
												"properties",
												":type"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "archiveID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "type",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "domain/deployments",
					"item": [
						{
							"name": "Get the deployment information of all API Servers in the domain.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/domain/deployments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"domain",
										"deployments"
									]
								},
								"description": "Get the deployment information of all API Servers in the domain.Note that the Deployment Archive id currently deployed to each instance is the Id value contained within the rootProperties for the instance, see example data below."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/domain/deployments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"domain",
												"deployments"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"est8c_\": {\n      \"in4c4\": {\n        \"rootProperties\": {\n          \"pariatur_4\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"nostrud_5\": \"<string>\",\n          \"ullamco_ea7\": \"<string>\",\n          \"nostrud28\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"nostrude52\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      \"enimc8\": {\n        \"rootProperties\": {\n          \"est54a\": \"<string>\",\n          \"laboris_507\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"do_0c8\": \"<string>\",\n          \"in4\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"incididuntf3\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      \"aliquip208\": {\n        \"rootProperties\": {\n          \"est_d\": \"<string>\",\n          \"aliquip_63d\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"ut3c_\": \"<string>\",\n          \"ex__77\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"consectetur_87d\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      }\n    },\n    \"sit_0d\": {\n      \"cupidatat_3f\": {\n        \"rootProperties\": {\n          \"sit_d\": \"<string>\",\n          \"dolore__\": \"<string>\",\n          \"dolor_6a\": \"<string>\",\n          \"proident_15\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"in_3\": \"<string>\",\n          \"ex26\": \"<string>\",\n          \"irureb\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"et_49\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      \"sunt3\": {\n        \"rootProperties\": {\n          \"do6e\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"aliquip1\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"officia_f2f\": \"<string>\",\n          \"velitfd8\": \"<string>\",\n          \"dolore1\": \"<string>\",\n          \"Duis_b45\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      }\n    },\n    \"ut60\": {\n      \"exercitation_f6\": {\n        \"rootProperties\": {\n          \"quif4\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"proident_9d\": \"<string>\",\n          \"irure_c_\": \"<string>\",\n          \"magnabd\": \"<string>\",\n          \"eu3c\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"dolor2b4\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      \"do_2\": {\n        \"rootProperties\": {\n          \"eiusmod_d\": \"<string>\",\n          \"autec4\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"anim459\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"ad_6\": \"<string>\",\n          \"magna29\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      },\n      \"in_d\": {\n        \"rootProperties\": {\n          \"dolore_a5\": \"<string>\"\n        },\n        \"policyProperties\": {\n          \"labore4\": \"<string>\"\n        },\n        \"environmentProperties\": {\n          \"dolore_3\": \"<string>\",\n          \"reprehenderit_ab\": \"<string>\",\n          \"ut_401\": \"<string>\"\n        },\n        \"user\": \"<string>\",\n        \"deploymentTimestamp\": \"<long>\",\n        \"status\": \"<string>\"\n      }\n    }\n  }\n}"
								}
							]
						},
						{
							"name": "Gets all details of all the deployed configurations in a domain",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/domain/deployments/withpending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"domain",
										"deployments",
										"withpending"
									]
								},
								"description": "This method gets all details of all the deployed configurations in a domain including the configurations that are marked as pending, i.e. the deployment of the configuration is not yet complete. The actual configuration is not returned, only metadata relating to it.This method is called internally within the Node Manager, it is not actually invoked as a REST API call at all. (It may have been exposed as REST API for future proofing or is just no longer used!)While this is an internal type of method it would be OK for a customer to call, as it is only reading data.The swagger tool does not seems to show details of the object returned so I think its a bit useless in this case. This Map<String, Map<String, List ServiceDeploymentArchiveDetails seems to show up as an Object."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/domain/deployments/withpending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"domain",
												"deployments",
												"withpending"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"ad_c6\": {\n      \"non_79b\": [\n        {\n          \"rootProperties\": {\n            \"uta\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"elit1a9\": \"<string>\",\n            \"esse_55\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"reprehenderita\": \"<string>\",\n            \"ea1d\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        },\n        {\n          \"rootProperties\": {\n            \"ine\": \"<string>\",\n            \"non52c\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"minim_61\": \"<string>\",\n            \"nulla_2c6\": \"<string>\",\n            \"veniam__e\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"dolor79_\": \"<string>\",\n            \"adipisicing6_\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        }\n      ]\n    },\n    \"adipisicing_6\": {\n      \"non83\": [\n        {\n          \"rootProperties\": {\n            \"ad26\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"sint77\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"veniam3\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        },\n        {\n          \"rootProperties\": {\n            \"ipsum_1be\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"nostrud5\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"cupidatat_43\": \"<string>\",\n            \"occaecat_9a\": \"<string>\",\n            \"nisic42\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        }\n      ],\n      \"adipisicing2\": [\n        {\n          \"rootProperties\": {\n            \"culpa9\": \"<string>\",\n            \"quis_105\": \"<string>\",\n            \"nisi4_a\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"irure_39\": \"<string>\",\n            \"idfb8\": \"<string>\",\n            \"veniam_a\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"id_110\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        },\n        {\n          \"rootProperties\": {\n            \"incididunt_67\": \"<string>\",\n            \"mollitd\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"consequat_6d\": \"<string>\",\n            \"reprehenderit5\": \"<string>\",\n            \"et8\": \"<string>\",\n            \"et__\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"Lorem9c9\": \"<string>\",\n            \"ut__\": \"<string>\",\n            \"cupidatat52c\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        }\n      ]\n    },\n    \"ipsum_89\": {\n      \"ullamco4\": [\n        {\n          \"rootProperties\": {\n            \"in_c5\": \"<string>\",\n            \"Lorem6\": \"<string>\",\n            \"Duis_d_\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"qui132\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"eu_a_\": \"<string>\",\n            \"reprehenderit9\": \"<string>\",\n            \"ut2\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        },\n        {\n          \"rootProperties\": {\n            \"incididunt543\": \"<string>\",\n            \"nullac\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"ex8c\": \"<string>\",\n            \"Duis3e\": \"<string>\",\n            \"dolore_073\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"nulla_7\": \"<string>\",\n            \"deserunt_7_c\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        }\n      ],\n      \"sint_55\": [\n        {\n          \"rootProperties\": {\n            \"cupidatat_54\": \"<string>\",\n            \"dolor_d5\": \"<string>\",\n            \"enim_c6\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"eiusmod_23\": \"<string>\",\n            \"adipisicing_d6\": \"<string>\",\n            \"qui_2\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"tempor_b\": \"<string>\",\n            \"eiusmod_94b\": \"<string>\",\n            \"laborum46_\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        },\n        {\n          \"rootProperties\": {\n            \"Duis___a\": \"<string>\",\n            \"in_ad\": \"<string>\",\n            \"velit_7\": \"<string>\"\n          },\n          \"policyProperties\": {\n            \"do5\": \"<string>\",\n            \"occaecat_5\": \"<string>\",\n            \"sit_032\": \"<string>\"\n          },\n          \"environmentProperties\": {\n            \"elit_ad\": \"<string>\",\n            \"pariatur6\": \"<string>\",\n            \"reprehenderit_5\": \"<string>\"\n          },\n          \"user\": \"<string>\",\n          \"deploymentTimestamp\": \"<long>\",\n          \"status\": \"<string>\"\n        }\n      ]\n    }\n  }\n}"
								}
							]
						}
					]
				},
				{
					"name": "groupsettings",
					"item": [
						{
							"name": "Get the group settings",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deployment/groupsettings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"groupsettings"
									]
								},
								"description": "This method is called by an Admin Node Manager on a remote Node Manager to retrieve the group settings."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Save group settings for groups on disk",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productVersion\": \"7.2.0\",\n  \"version\": 1,\n  \"timestamp\": 0,\n  \"passphraseHistory\": {\n    \"consectetur0\": {\n      \"passwordHistory\": [\n        \"u\",\n        \"incididunt eu\"\n      ],\n      \"passwordTimestamp\": 0\n    },\n    \"minim_b7\": {\n      \"passwordHistory\": [\n        \"occaecat ad\",\n        \"velit labore elit proident\"\n      ],\n      \"passwordTimestamp\": 0\n    },\n    \"culpa_7da\": {\n      \"passwordHistory\": [\n        \"dolor Ut\",\n        \"aliqua incididunt\"\n      ],\n      \"passwordTimestamp\": 0\n    }\n  },\n  \"groupSettingsVersion\": {\n    \"version\": 1,\n    \"timestamp\": 0\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/groupsettings?propagateStore=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"groupsettings"
									],
									"query": [
										{
											"key": "propagateStore",
											"value": "true"
										}
									]
								},
								"description": "Save group settings for groups on disk"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<long>\",\n  \"timestamp\": \"<long>\",\n  \"passphraseHistory\": {\n    \"veniam9\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"groupSettingsVersion\": {\n    \"version\": \"<long>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"description\": \"<string>\",\n  \"matchCount\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"assertion\": [\n    {\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<long>\",\n  \"timestamp\": \"<long>\",\n  \"passphraseHistory\": {\n    \"veniam9\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"groupSettingsVersion\": {\n    \"version\": \"<long>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<long>\",\n  \"timestamp\": \"<long>\",\n  \"passphraseHistory\": {\n    \"veniam9\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"groupSettingsVersion\": {\n    \"version\": \"<long>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"productVersion\": \"<string>\",\n  \"version\": \"<long>\",\n  \"timestamp\": \"<long>\",\n  \"passphraseHistory\": {\n    \"veniam9\": {\n      \"passwordHistory\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"passwordTimestamp\": \"<long>\"\n    }\n  },\n  \"groupSettingsVersion\": {\n    \"version\": \"<long>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get the group settings version",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/deployment/groupsettings/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"groupsettings",
										"version"
									]
								},
								"description": "This method is called by an Admin Node Manager on a remote Admin Node Manager to retrieve the group settings version."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings/version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings",
												"version"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/deployment/groupsettings/version",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"deployment",
												"groupsettings",
												"version"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Creates new deployment transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/deployment/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deployment",
								"create"
							]
						},
						"description": "Creates new deployment transaction"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deployment/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Accepts deployment transaction",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "manifest",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/deployment/accept",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"deployment",
								"accept"
							]
						},
						"description": "Accepts deployment transaction"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "manifest",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/deployment/accept",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deployment",
										"accept"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "rbac",
			"item": [
				{
					"name": "permissions",
					"item": [
						{
							"name": "Deprecated.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rbac/permissions?role=veniam incididunt elit aliqua&role=elit magna ullamco minim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"permissions"
									],
									"query": [
										{
											"key": "role",
											"value": "veniam incididunt elit aliqua"
										},
										{
											"key": "role",
											"value": "elit magna ullamco minim"
										}
									]
								},
								"description": "Deprecated - use [/permissions/roles](#RBACServiceprocessRolesPermissionsGet) instead"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions?role=<string>&role=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions"
											],
											"query": [
												{
													"key": "role",
													"value": "<string>"
												},
												{
													"key": "role",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions?role=<string>&role=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions"
											],
											"query": [
												{
													"key": "role",
													"value": "<string>"
												},
												{
													"key": "role",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns a list of roles and permissions ACL available per role.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rbac/permissions/roles?name=veniam incididunt elit aliqua&name=elit magna ullamco minim",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"permissions",
										"roles"
									],
									"query": [
										{
											"key": "name",
											"value": "veniam incididunt elit aliqua",
											"description": "(Required) The role names to get"
										},
										{
											"key": "name",
											"value": "elit magna ullamco minim",
											"description": "(Required) The role names to get"
										}
									]
								},
								"description": "If role __name__ are not supplied, all roles are returned.  If role __name__ are supplied, ACL permissions are returned per requested role(s)."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions/roles?name=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions",
												"roles"
											],
											"query": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"roles\": {\n    \"culpa_624\": [\n      \"<string>\"\n    ],\n    \"minim_c8\": [\n      \"<string>\"\n    ],\n    \"sint_1\": [\n      \"<string>\"\n    ]\n  }\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions/roles?name=<string>&name=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions",
												"roles"
											],
											"query": [
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "name",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns the user permissions of the current user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rbac/permissions/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"permissions",
										"currentuser"
									]
								},
								"description": "Returns the user permissions of the current user"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions/currentuser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions",
												"currentuser"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"user\": \"<string>\",\n  \"permissions\": [\n    \"<string>\"\n  ]\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/permissions/currentuser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"permissions",
												"currentuser"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "currentuser",
					"item": [
						{
							"name": "Returns the name of the current user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/rbac/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"currentuser"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/currentuser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"currentuser"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rbac/currentuser",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"currentuser"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns the name of the current user",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "SAMLResponse",
											"value": "commodo quis"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rbac/currentuser/sso/post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"currentuser",
										"sso",
										"post"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "SAMLResponse",
													"value": "<string>"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rbac/currentuser/sso/post",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"currentuser",
												"sso",
												"post"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "SAMLResponse",
													"value": "<string>"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/rbac/currentuser/sso/post",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rbac",
												"currentuser",
												"sso",
												"post"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Logs out a user by returning a redirect with URL containing invalid credentials",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rbac/logout?request.preventCache=<String>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rbac",
								"logout"
							],
							"query": [
								{
									"key": "request.preventCache",
									"value": "<String>"
								}
							]
						}
					},
					"response": [
						{
							"name": "Moved Permanently",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rbac/logout?request.preventCache=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"logout"
									],
									"query": [
										{
											"key": "request.preventCache",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Moved Permanently",
							"code": 301,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "eiusmod ut minim tempor"
								},
								{
									"key": "password",
									"value": "reprehenderit"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/rbac/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rbac",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "No Content",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "<string>"
										},
										{
											"key": "password",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rbac/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rbac",
										"login"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "reports",
			"item": [
				{
					"name": "metrics",
					"item": [
						{
							"name": "summary",
							"item": [
								{
									"name": "Produces a summary report",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/summary/:id/:level?from=<String>&to=<String>&GROUPNAME=<String>&INSTANCENAME=<String>&CLIENTNAME=<String>&SERVICENAME=<String>&HOSTNAME=<String>&PROTOCOLNAME=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"summary",
												":id",
												":level"
											],
											"query": [
												{
													"key": "from",
													"value": "<String>",
													"description": "(Required) The starting date/time for the report."
												},
												{
													"key": "to",
													"value": "<String>",
													"description": "(Required) The end date/time for the report."
												},
												{
													"key": "GROUPNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "INSTANCENAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "CLIENTNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "SERVICENAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "HOSTNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "PROTOCOLNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<String>",
													"description": "(Required) The custom report identifier"
												},
												{
													"key": "level",
													"value": "<String>",
													"description": "(Required) The report level (0 or 1 for drill-through)"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:id/:level?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":id",
														":level"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The custom report identifier"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:id/:level?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":id",
														":level"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The custom report identifier"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:id/:level?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":id",
														":level"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The custom report identifier"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:id/:level?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":id",
														":level"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The custom report identifier"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)"
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Produces a summary report for a custom report",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"ServiceUsagePerClient\",\n  \"levels\": [\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"magna\",\n        \"occaecat dolor in\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"pariatur mollit adipisicing ut\",\n        \"sunt\"\n      ],\n      \"hiddenFields\": [\n        \"officia non qui\",\n        \"elit eu\"\n      ]\n    },\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"Lorem incididunt\",\n        \"eiusmod et qui\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"incididunt eu anim commodo ut\",\n        \"ullamco eu anim\"\n      ],\n      \"hiddenFields\": [\n        \"consectetur a\",\n        \"ut cillum commodo pariatur veniam\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/summary/:level",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"summary",
												":level"
											],
											"variable": [
												{
													"key": "level",
													"value": "<String>",
													"description": "(Required) The report level (0 or 1 for drill-through)."
												}
											]
										},
										"description": "Produces an aggregated summary report from a __CustomReport__.  The report is not stored.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:level",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":level"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:level",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":level"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:level",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":level"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/summary/:level",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"summary",
														":level"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "timeline",
							"item": [
								{
									"name": "Produces a timeline report for a stored custom report",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/timeline/:id/:level/:seriesName?from=<String>&to=<String>&GROUPNAME=<String>&INSTANCENAME=<String>&CLIENTNAME=<String>&SERVICENAME=<String>&HOSTNAME=<String>&PROTOCOLNAME=<String>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"timeline",
												":id",
												":level",
												":seriesName"
											],
											"query": [
												{
													"key": "from",
													"value": "<String>",
													"description": "(Required) The starting date/time for the report."
												},
												{
													"key": "to",
													"value": "<String>",
													"description": "(Required) The end date/time for the report."
												},
												{
													"key": "GROUPNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "INSTANCENAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "CLIENTNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "SERVICENAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "HOSTNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												},
												{
													"key": "PROTOCOLNAME",
													"value": "<String>",
													"description": "Specified at level 1, the group-by field for drill-down."
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<String>",
													"description": "(Required) The stored report ID"
												},
												{
													"key": "level",
													"value": "<String>",
													"description": "(Required) The report level (0 or 1 for drill-through)."
												},
												{
													"key": "seriesName",
													"value": "<String>",
													"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
												}
											]
										},
										"description": "Produces an timeline report from a stored [CustomReport](CustomReport.html).  The __seriesName__ is a series name specified from the report.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:id/:level/:seriesName?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":id",
														":level",
														":seriesName"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The stored report ID"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"series\": [\n    {\n      \"name\": \"<string>\",\n      \"pointInterval\": \"<long>\",\n      \"pointStart\": \"<long>\",\n      \"data\": [\n        \"<float>\",\n        \"<float>\"\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"pointInterval\": \"<long>\",\n      \"pointStart\": \"<long>\",\n      \"data\": [\n        \"<float>\",\n        \"<float>\"\n      ]\n    }\n  ]\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:id/:level/:seriesName?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":id",
														":level",
														":seriesName"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The stored report ID"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:id/:level/:seriesName?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":id",
														":level",
														":seriesName"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The stored report ID"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:id/:level/:seriesName?from=<string>&to=<string>&GROUPNAME=<string>&INSTANCENAME=<string>&CLIENTNAME=<string>&SERVICENAME=<string>&HOSTNAME=<string>&PROTOCOLNAME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":id",
														":level",
														":seriesName"
													],
													"query": [
														{
															"key": "from",
															"value": "<string>"
														},
														{
															"key": "to",
															"value": "<string>"
														},
														{
															"key": "GROUPNAME",
															"value": "<string>"
														},
														{
															"key": "INSTANCENAME",
															"value": "<string>"
														},
														{
															"key": "CLIENTNAME",
															"value": "<string>"
														},
														{
															"key": "SERVICENAME",
															"value": "<string>"
														},
														{
															"key": "HOSTNAME",
															"value": "<string>"
														},
														{
															"key": "PROTOCOLNAME",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<String>",
															"description": "(Required) The stored report ID"
														},
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Produces a timeline report for a custom report",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"ServiceUsagePerClient\",\n  \"levels\": [\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/timeline/:level/:seriesName",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"timeline",
												":level",
												":seriesName"
											],
											"variable": [
												{
													"key": "level",
													"value": "<String>",
													"description": "(Required) The report level (0 or 1 for drill-through)."
												},
												{
													"key": "seriesName",
													"value": "<String>",
													"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
												}
											]
										},
										"description": "Produces an aggregated summary report from a [CustomReport](CustomReport.html).  The report is not stored.  The __seriesName__ is a series name specified from the report.  At level 1, the drill-through requires that you choose values from the report's group-by and specify them as level 1 optional parameters."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:level/:seriesName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":level",
														":seriesName"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"series\": [\n    {\n      \"name\": \"<string>\",\n      \"pointInterval\": \"<long>\",\n      \"pointStart\": \"<long>\",\n      \"data\": [\n        \"<float>\",\n        \"<float>\"\n      ]\n    },\n    {\n      \"name\": \"<string>\",\n      \"pointInterval\": \"<long>\",\n      \"pointStart\": \"<long>\",\n      \"data\": [\n        \"<float>\",\n        \"<float>\"\n      ]\n    }\n  ]\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:level/:seriesName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":level",
														":seriesName"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:level/:seriesName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":level",
														":seriesName"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/metrics/timeline/:level/:seriesName",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"metrics",
														"timeline",
														":level",
														":seriesName"
													],
													"variable": [
														{
															"key": "level",
															"value": "<String>",
															"description": "(Required) The report level (0 or 1 for drill-through)."
														},
														{
															"key": "seriesName",
															"value": "<String>",
															"description": "(Required) The name of the metric for which to return a series (e.g. \"numMessages\")."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Check that the server is alive",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/metrics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"metrics"
									]
								},
								"description": "Returns 'OK'"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of processes available to query.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/metrics/processes?value=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"metrics",
										"processes"
									],
									"query": [
										{
											"key": "value",
											"value": "<String>"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processes?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processes"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processes?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processes"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processes?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processes"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of process groups available to query.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/metrics/processgroups?value=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"metrics",
										"processgroups"
									],
									"query": [
										{
											"key": "value",
											"value": "<String>"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processgroups?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processgroups"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processgroups?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processgroups"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/processgroups?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"processgroups"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of process groups.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/metrics/groups/:typeName?value=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"metrics",
										"groups",
										":typeName"
									],
									"query": [
										{
											"key": "value",
											"value": "<String>"
										}
									],
									"variable": [
										{
											"key": "typeName",
											"value": "<String>",
											"description": "(Required) The metric group type name"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/groups/:typeName?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"groups",
												":typeName"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "typeName",
													"value": "<String>",
													"description": "(Required) The metric group type name"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/groups/:typeName?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"groups",
												":typeName"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "typeName",
													"value": "<String>",
													"description": "(Required) The metric group type name"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/groups/:typeName?value=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"groups",
												":typeName"
											],
											"query": [
												{
													"key": "value",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "typeName",
													"value": "<String>",
													"description": "(Required) The metric group type name"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of metric field names available for summary and timeline queries.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/metrics/fields?metricGroupType=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"metrics",
										"fields"
									],
									"query": [
										{
											"key": "metricGroupType",
											"value": "<String>"
										}
									]
								},
								"description": "Retrieves a set of metric fields for a __metricGroupType__ that may be used when querying or interpreting the summary and timeline reports for that type.  Valid __metricGroupType__ are: SystemOverview, Service, Client, ServiceUsagePerClient, TargetServer.  The __metricType__ is the metric name.  The __aggreggateName__ is the metric name for the aggregated __metricType__."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/fields?metricGroupType=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"fields"
											],
											"query": [
												{
													"key": "metricGroupType",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"metricType\": \"<string>\",\n    \"aggregateName\": \"<string>\"\n  },\n  {\n    \"metricType\": \"<string>\",\n    \"aggregateName\": \"<string>\"\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/fields?metricGroupType=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"fields"
											],
											"query": [
												{
													"key": "metricGroupType",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/metrics/fields?metricGroupType=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"metrics",
												"fields"
											],
											"query": [
												{
													"key": "metricGroupType",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "custom",
					"item": [
						{
							"name": "{reportid}",
							"item": [
								{
									"name": "Gets a report by ID.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/custom/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updates a report by ID.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"ServiceUsagePerClient\",\n  \"levels\": [\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/custom/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Deletes a report by ID.",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reports/custom/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/custom/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"custom",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Gets a list of reports.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/custom",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"custom"
									]
								},
								"description": "The list of custom reports includes the system default reports."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          },\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          },\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          },\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"visible\": \"<boolean>\"\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          },\n          {\n            \"conditions\": [\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            ],\n            \"logic\": \"<string>\",\n            \"where\": \"<string>\"\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a report.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"ServiceUsagePerClient\",\n  \"levels\": [\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"ServiceUsagePerClient\",\n      \"chart\": \"line\",\n      \"top\": {\n        \"top\": 5\n      },\n      \"metrics\": [\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        },\n        {\n          \"name\": \"numMessages\",\n          \"visible\": true\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"AND\",\n          \"where\": \"OR\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reports/custom",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"custom"
									]
								},
								"description": "A report is available in Analytics as one of the main tabs."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
								},
								{
									"name": "A report with that ID already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"levels\": [\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"chart\": \"<string>\",\n      \"top\": {\n        \"top\": \"<integer>\"\n      },\n      \"metrics\": [\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"visible\": \"<boolean>\"\n        }\n      ],\n      \"groupBy\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"conditionGroups\": [\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        },\n        {\n          \"conditions\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"logic\": \"<string>\",\n          \"where\": \"<string>\"\n        }\n      ],\n      \"additionalFields\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"hiddenFields\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/custom",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"custom"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "audit",
					"item": [
						{
							"name": "query",
							"item": [
								{
									"name": "{queryid}",
									"item": [
										{
											"name": "Gets a saved audit query by ID.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query/:queryid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query",
														":queryid"
													],
													"variable": [
														{
															"key": "queryid",
															"value": "<String>",
															"description": "(Required) The query ID."
														}
													]
												},
												"description": "Gets a saved audit [Query](Query.html) by ID."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}"
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Analytics is disabled.  See logs for more information.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Updates a saved audit query by ID.",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"Errors last 5 days\",\n  \"fieldsToSelect\": [\n    \"ALERTCOUNT\",\n    \"ERRORCOUNT\",\n    \"FATALCOUNT\",\n    \"LASTTEXT\",\n    \"LASTSEVERITY\",\n    \"PASSCOUNT\",\n    \"GATEWAYNAME\",\n    \"LOGTIME\",\n    \"MESSAGEID\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    }\n  ],\n  \"summary\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query/:queryid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query",
														":queryid"
													],
													"variable": [
														{
															"key": "queryid",
															"value": "<String>",
															"description": "(Required) The query ID."
														}
													]
												},
												"description": "Updates a saved audit [Query](Query.html) by ID."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}"
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Analytics is disabled.  See logs for more information.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID."
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Deletes a saved audit query by ID.",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query/:queryid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query",
														":queryid"
													],
													"variable": [
														{
															"key": "queryid",
															"value": "<String>",
															"description": "(Required) The query ID to delete."
														}
													]
												},
												"description": "Deletes a saved audit [Query](Query.html) by ID."
											},
											"response": [
												{
													"name": "No Content",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID to delete."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Bad Request",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID to delete."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Internal Server Error",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID to delete."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Analytics is disabled.  See logs for more information.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/reports/audit/query/:queryid",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"reports",
																"audit",
																"query",
																":queryid"
															],
															"variable": [
																{
																	"key": "queryid",
																	"value": "<String>",
																	"description": "(Required) The query ID to delete."
																}
															]
														}
													},
													"status": "Service Unavailable",
													"code": 503,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Gets a list of all saved audit query.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/query",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"query"
											]
										},
										"description": "Gets a list of all saved [Query](Query.html)."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"fieldsToSelect\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"conditionGroups\": [\n      {\n        \"conditions\": [\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ],\n        \"logic\": \"<string>\",\n        \"where\": \"<string>\"\n      },\n      {\n        \"conditions\": [\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ],\n        \"logic\": \"<string>\",\n        \"where\": \"<string>\"\n      }\n    ],\n    \"summary\": \"<boolean>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"fieldsToSelect\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"conditionGroups\": [\n      {\n        \"conditions\": [\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ],\n        \"logic\": \"<string>\",\n        \"where\": \"<string>\"\n      },\n      {\n        \"conditions\": [\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"operation\": \"<string>\",\n            \"value\": \"<string>\"\n          }\n        ],\n        \"logic\": \"<string>\",\n        \"where\": \"<string>\"\n      }\n    ],\n    \"summary\": \"<boolean>\"\n  }\n]"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Saves a query for recalling later.",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"Errors last 5 days\",\n  \"fieldsToSelect\": [\n    \"ALERTCOUNT\",\n    \"ERRORCOUNT\",\n    \"FATALCOUNT\",\n    \"LASTTEXT\",\n    \"LASTSEVERITY\",\n    \"PASSCOUNT\",\n    \"GATEWAYNAME\",\n    \"LOGTIME\",\n    \"MESSAGEID\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    }\n  ],\n  \"summary\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/audit/query",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"query"
											]
										},
										"description": "Saves a query for recalling later."
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/audit/query",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"audit",
														"query"
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Search audit entries.",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Return results within range.  E.g.: items=[offset]-[limit].",
										"key": "Range",
										"value": "<String>"
									},
									{
										"description": "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
										"key": "Sort",
										"value": "<String>"
									},
									{
										"description": "Force a refresh of any cached data.",
										"key": "Refresh",
										"value": "<String>"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"Errors last 5 days\",\n  \"fieldsToSelect\": [\n    \"ALERTCOUNT\",\n    \"ERRORCOUNT\",\n    \"FATALCOUNT\",\n    \"LASTTEXT\",\n    \"LASTSEVERITY\",\n    \"PASSCOUNT\",\n    \"GATEWAYNAME\",\n    \"LOGTIME\",\n    \"MESSAGEID\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        },\n        {\n          \"name\": \"LASTTEXT\",\n          \"operation\": \"GTEQ\",\n          \"value\": \"Connected\"\n        }\n      ],\n      \"logic\": \"AND\",\n      \"where\": \"OR\"\n    }\n  ],\n  \"summary\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reports/audit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"audit"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"description": "Return results within range.  E.g.: items=[offset]-[limit].",
												"key": "Range",
												"value": "<string>"
											},
											{
												"description": "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
												"key": "Sort",
												"value": "<string>"
											},
											{
												"description": "Force a refresh of any cached data.",
												"key": "Refresh",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/audit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"description": "Return results within range.  E.g.: items=[offset]-[limit].",
												"key": "Range",
												"value": "<string>"
											},
											{
												"description": "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
												"key": "Sort",
												"value": "<string>"
											},
											{
												"description": "Force a refresh of any cached data.",
												"key": "Refresh",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/audit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"description": "Return results within range.  E.g.: items=[offset]-[limit].",
												"key": "Range",
												"value": "<string>"
											},
											{
												"description": "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
												"key": "Sort",
												"value": "<string>"
											},
											{
												"description": "Force a refresh of any cached data.",
												"key": "Refresh",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/audit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											},
											{
												"description": "Return results within range.  E.g.: items=[offset]-[limit].",
												"key": "Range",
												"value": "<string>"
											},
											{
												"description": "The field to sort and direction (+ ascending, - descending).  E.g.: name+",
												"key": "Sort",
												"value": "<string>"
											},
											{
												"description": "Force a refresh of any cached data.",
												"key": "Refresh",
												"value": "<string>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"fieldsToSelect\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"conditionGroups\": [\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    },\n    {\n      \"conditions\": [\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"operation\": \"<string>\",\n          \"value\": \"<string>\"\n        }\n      ],\n      \"logic\": \"<string>\",\n      \"where\": \"<string>\"\n    }\n  ],\n  \"summary\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/audit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets an audit message payload.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/audit/payload/:auditId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"audit",
										"payload",
										":auditId"
									],
									"variable": [
										{
											"key": "auditId",
											"value": "-42651681",
											"description": "(Required) The audit log ID"
										}
									]
								},
								"description": "Gets an audit message payload."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/payload/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"payload",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/payload/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"payload",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/payload/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"payload",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/payload/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"payload",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets an audit message details.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/audit/details/:auditId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"audit",
										"details",
										":auditId"
									],
									"variable": [
										{
											"key": "auditId",
											"value": "-42651681",
											"description": "(Required) The audit log ID"
										}
									]
								},
								"description": "Gets an audit message details."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/details/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"details",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"details\": {\n    \"method\": \"<string>\",\n    \"uri\": \"<string>\"\n  },\n  \"headers\": [\n    {\n      \"cillum_6c\": \"<string>\",\n      \"Lorem_3b7\": \"<string>\"\n    },\n    {\n      \"in2\": \"<string>\",\n      \"commodo81\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "No Content",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/details/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"details",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"details\": {\n    \"method\": \"<string>\",\n    \"uri\": \"<string>\"\n  },\n  \"headers\": [\n    {\n      \"commodo_71\": \"<string>\",\n      \"officia_681\": \"<string>\"\n    },\n    {\n      \"velit_ae0\": \"<string>\",\n      \"exercitation46\": \"<string>\",\n      \"reprehenderit2f\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/details/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"details",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/details/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"details",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/details/:auditId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"details",
												":auditId"
											],
											"variable": [
												{
													"key": "auditId",
													"value": "-42651681",
													"description": "(Required) The audit log ID"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of values for a field.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/audit/values/:fieldname?startswith=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"audit",
										"values",
										":fieldname"
									],
									"query": [
										{
											"key": "startswith",
											"value": "<String>",
											"description": "An optional parameter to return values starting with the supplied string."
										}
									],
									"variable": [
										{
											"key": "fieldname",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Gets a list of values for a field.  The list can be filtered with values matching __startsWith__."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/values/:fieldname?startswith=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"values",
												":fieldname"
											],
											"query": [
												{
													"key": "startswith",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "fieldname",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/values/:fieldname?startswith=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"values",
												":fieldname"
											],
											"query": [
												{
													"key": "startswith",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "fieldname",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/values/:fieldname?startswith=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"values",
												":fieldname"
											],
											"query": [
												{
													"key": "startswith",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "fieldname",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets a list of auditable fields.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/audit/fields?summary=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"audit",
										"fields"
									],
									"query": [
										{
											"key": "summary",
											"value": "true",
											"description": "(Required) Indicates that the fields should be for the summary (true), or detailed report (false).  Defaults to true."
										}
									]
								},
								"description": "Gets a list of auditable fields.  There are two types, one for summary where there is one aggregated record per message, and detailed, where there can be multiple records per message."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/fields?summary=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"fields"
											],
											"query": [
												{
													"key": "summary",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"valuesUrl\": \"<string>\",\n    \"custom\": \"<boolean>\",\n    \"select\": \"<boolean>\",\n    \"condition\": \"<boolean>\",\n    \"timestampType\": \"<boolean>\",\n    \"binaryType\": \"<boolean>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"valuesUrl\": \"<string>\",\n    \"custom\": \"<boolean>\",\n    \"select\": \"<boolean>\",\n    \"condition\": \"<boolean>\",\n    \"timestampType\": \"<boolean>\",\n    \"binaryType\": \"<boolean>\"\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/fields?summary=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"fields"
											],
											"query": [
												{
													"key": "summary",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/audit/fields?summary=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"audit",
												"fields"
											],
											"query": [
												{
													"key": "summary",
													"value": "true"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "alerts",
					"item": [
						{
							"name": "Gets a list of system alerts",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/alerts?from=24h",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"alerts"
									],
									"query": [
										{
											"key": "from",
											"value": "24h",
											"description": "(Required) The amount of time in some range of months, days, weeks, hours, minutes.  E.g. 24h"
										}
									]
								},
								"description": "Gets a list of system alerts."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts?from=24h",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts"
											],
											"query": [
												{
													"key": "from",
													"value": "24h"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts?from=24h",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts"
											],
											"query": [
												{
													"key": "from",
													"value": "24h"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts?from=24h",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts"
											],
											"query": [
												{
													"key": "from",
													"value": "24h"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Gets alerts for a message by ID.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/alerts/:messageId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"alerts",
										":messageId"
									],
									"variable": [
										{
											"key": "messageId",
											"value": "<String>",
											"description": "(Required) The message ID."
										}
									]
								},
								"description": "Gets alerts for a message by ID."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts/:messageId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts",
												":messageId"
											],
											"variable": [
												{
													"key": "messageId",
													"value": "<String>",
													"description": "(Required) The message ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts/:messageId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts",
												":messageId"
											],
											"variable": [
												{
													"key": "messageId",
													"value": "<String>",
													"description": "(Required) The message ID."
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/alerts/:messageId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"alerts",
												":messageId"
											],
											"variable": [
												{
													"key": "messageId",
													"value": "<String>",
													"description": "(Required) The message ID."
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "generate",
					"item": [
						{
							"name": "Creates a job to manually generate a report.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"pdf\",\n  \"reportGroup\": \"ServiceUsagePerClient\",\n  \"reportParameters\": {\n    \"ut__b\": {},\n    \"amet_ba\": {}\n  },\n  \"customReport\": {\n    \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n    \"name\": \"My Report\",\n    \"type\": \"ServiceUsagePerClient\",\n    \"levels\": [\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"somebody@acme.org\",\n  \"enabled\": true,\n  \"range\": \"today\",\n  \"fromDate\": \"today\",\n  \"toDate\": \"today\",\n  \"scheduled\": \"daily\",\n  \"generateTime\": \"09:00\",\n  \"dayOfWeek\": \"fri\",\n  \"dayOfMonth\": \"first\",\n  \"lastRun\": 0,\n  \"timeout\": 30000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reports/generate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"generate"
									]
								},
								"description": "Report generation begins immediately, ignoring the schedule settings.  The response contains an job \"id\" identifier.  The identifier is used to query the status of the job."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/generate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Polls the status of a report generation job.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/generate/:jobid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"generate",
										":jobid"
									],
									"variable": [
										{
											"key": "jobid",
											"value": "<String>",
											"description": "(Required) The job identifier"
										}
									]
								},
								"description": "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/generate/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/generate/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/generate/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"generate",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "download",
					"item": [
						{
							"name": "Downloads a PDF from the result of a completed report generation job.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/download/pdf/:jobid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"download",
										"pdf",
										":jobid"
									],
									"variable": [
										{
											"key": "jobid",
											"value": "<String>",
											"description": "(Required) The job identifier"
										}
									]
								},
								"description": "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method.  The job must be complete.  Ensure the job is complete by first (checking the job status)[#ReportsResourcegetGenerateReportStatus]."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/pdf/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"pdf",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/pdf/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"pdf",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/pdf/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"pdf",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Downloads a CSV from the result of a completed report generation job.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/reports/download/csv/:jobid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"download",
										"csv",
										":jobid"
									],
									"variable": [
										{
											"key": "jobid",
											"value": "<String>",
											"description": "(Required) The job identifier"
										}
									]
								},
								"description": "The job identifier is returned from the [generate report](#ReportsResourcegenerateReport) method.  The job must be complete.  Ensure the job is complete by first (checking the job status)[#ReportsResourcegetGenerateReportStatus]."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/csv/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"csv",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/csv/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"csv",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/download/csv/:jobid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"download",
												"csv",
												":jobid"
											],
											"variable": [
												{
													"key": "jobid",
													"value": "<String>",
													"description": "(Required) The job identifier"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "schedule",
					"item": [
						{
							"name": "{reportid}",
							"item": [
								{
									"name": "Gets a scheduled report by ID.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/schedule/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) The report identifier."
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Updates a scheduled report by ID.",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"pdf\",\n  \"reportGroup\": \"ServiceUsagePerClient\",\n  \"reportParameters\": {\n    \"reprehenderit_\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n    \"name\": \"My Report\",\n    \"type\": \"ServiceUsagePerClient\",\n    \"levels\": [\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"somebody@acme.org\",\n  \"enabled\": true,\n  \"range\": \"today\",\n  \"fromDate\": \"today\",\n  \"toDate\": \"today\",\n  \"scheduled\": \"daily\",\n  \"generateTime\": \"09:00\",\n  \"dayOfWeek\": \"fri\",\n  \"dayOfMonth\": \"first\",\n  \"lastRun\": 0,\n  \"timeout\": 30000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/schedule/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) The report identifier."
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}"
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Deletes a scheduled report by ID.",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reports/schedule/:reportid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule",
												":reportid"
											],
											"variable": [
												{
													"key": "reportid",
													"value": "<String>",
													"description": "(Required) The report identifier."
												}
											]
										}
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Internal Server Error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Analytics is disabled.  See logs for more information.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/reports/schedule/:reportid",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports",
														"schedule",
														":reportid"
													],
													"variable": [
														{
															"key": "reportid",
															"value": "<String>",
															"description": "(Required) The report identifier."
														}
													]
												}
											},
											"status": "Service Unavailable",
											"code": 503,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Gets a list of all the scheduled reports.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/schedule",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"schedule"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"reportGroup\": \"<string>\",\n    \"reportParameters\": {\n      \"dolore_0\": \"<object>\",\n      \"aliquip_73\": \"<object>\"\n    },\n    \"customReport\": {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"levels\": [\n        {\n          \"type\": \"<string>\",\n          \"chart\": \"<string>\",\n          \"top\": {\n            \"top\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"metrics\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"groupBy\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"conditionGroups\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"additionalFields\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"hiddenFields\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"type\": \"<string>\",\n          \"chart\": \"<string>\",\n          \"top\": {\n            \"top\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"metrics\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"groupBy\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"conditionGroups\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"additionalFields\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"hiddenFields\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ]\n    },\n    \"email\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"range\": \"<string>\",\n    \"fromDate\": \"<string>\",\n    \"toDate\": \"<string>\",\n    \"scheduled\": \"<string>\",\n    \"generateTime\": \"<string>\",\n    \"dayOfWeek\": \"<string>\",\n    \"dayOfMonth\": \"<string>\",\n    \"lastRun\": \"<long>\",\n    \"timeout\": \"<long>\"\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"reportGroup\": \"<string>\",\n    \"reportParameters\": {\n      \"ut_b1\": \"<object>\",\n      \"Lorem25\": \"<object>\",\n      \"irurea5c\": \"<object>\"\n    },\n    \"customReport\": {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"levels\": [\n        {\n          \"type\": \"<string>\",\n          \"chart\": \"<string>\",\n          \"top\": {\n            \"top\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"metrics\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"groupBy\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"conditionGroups\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"additionalFields\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"hiddenFields\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        },\n        {\n          \"type\": \"<string>\",\n          \"chart\": \"<string>\",\n          \"top\": {\n            \"top\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          \"metrics\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"groupBy\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"conditionGroups\": [\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          ],\n          \"additionalFields\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"hiddenFields\": [\n            \"<string>\",\n            \"<string>\"\n          ]\n        }\n      ]\n    },\n    \"email\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"range\": \"<string>\",\n    \"fromDate\": \"<string>\",\n    \"toDate\": \"<string>\",\n    \"scheduled\": \"<string>\",\n    \"generateTime\": \"<string>\",\n    \"dayOfWeek\": \"<string>\",\n    \"dayOfMonth\": \"<string>\",\n    \"lastRun\": \"<long>\",\n    \"timeout\": \"<long>\"\n  }\n]"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a scheduled report.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n  \"name\": \"My Report\",\n  \"type\": \"pdf\",\n  \"reportGroup\": \"ServiceUsagePerClient\",\n  \"reportParameters\": {\n    \"reprehenderit_\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"Id-0001372322567916-ffffffffec92eba7-1\",\n    \"name\": \"My Report\",\n    \"type\": \"ServiceUsagePerClient\",\n    \"levels\": [\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"ServiceUsagePerClient\",\n        \"chart\": \"line\",\n        \"top\": {\n          \"top\": 5\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"somebody@acme.org\",\n  \"enabled\": true,\n  \"range\": \"today\",\n  \"fromDate\": \"today\",\n  \"toDate\": \"today\",\n  \"scheduled\": \"daily\",\n  \"generateTime\": \"09:00\",\n  \"dayOfWeek\": \"fri\",\n  \"dayOfMonth\": \"first\",\n  \"lastRun\": 0,\n  \"timeout\": 30000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reports/schedule",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"schedule"
									]
								},
								"description": "Reports can be scheduled to run periodically."
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Analytics is disabled.  See logs for more information.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"reportGroup\": \"<string>\",\n  \"reportParameters\": {\n    \"irurec13\": \"<object>\",\n    \"occaecat_2b5\": \"<object>\",\n    \"id_98\": \"<object>\"\n  },\n  \"customReport\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"levels\": [\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      },\n      {\n        \"type\": \"<string>\",\n        \"chart\": \"<string>\",\n        \"top\": {\n          \"top\": \"<integer>\"\n        },\n        \"metrics\": [\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"visible\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"groupBy\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"conditionGroups\": [\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"conditions\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"logic\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"where\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"additionalFields\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"hiddenFields\": [\n          \"<string>\",\n          \"<string>\"\n        ]\n      }\n    ]\n  },\n  \"email\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"range\": \"<string>\",\n  \"fromDate\": \"<string>\",\n  \"toDate\": \"<string>\",\n  \"scheduled\": \"<string>\",\n  \"generateTime\": \"<string>\",\n  \"dayOfWeek\": \"<string>\",\n  \"dayOfMonth\": \"<string>\",\n  \"lastRun\": \"<long>\",\n  \"timeout\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reports/schedule",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"schedule"
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "return the current logged in user in a User object",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/currentuser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports",
								"currentuser"
							]
						},
						"description": "returns the current logged in user in a User object"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"currentuser"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"organizationId\": \"<string>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"loginName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"mobile\": \"<string>\",\n  \"role\": \"<string>\",\n  \"image\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"createdOn\": \"<long>\",\n  \"state\": \"<string>\",\n  \"type\": \"<string>\",\n  \"orgs2Role\": {\n    \"ex1\": \"<string>\"\n  },\n  \"orgs2Name\": {\n    \"ullamcob\": \"<string>\"\n  },\n  \"authAttrs\": {\n    \"firstLogin\": \"<boolean>\",\n    \"isSSOLogin\": \"<boolean>\",\n    \"userDn\": \"<string>\",\n    \"lastSeen\": \"<long>\",\n    \"passwordSetOn\": \"<long>\",\n    \"changePassword\": \"<boolean>\",\n    \"changePasswordMessage\": \"<string>\"\n  },\n  \"dn\": \"<string>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"currentuser"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Analytics is disabled",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"currentuser"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/currentuser",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"currentuser"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "topology",
			"item": [
				{
					"name": "hosts",
					"item": [
						{
							"name": "{host ID}",
							"item": [
								{
									"name": "Get the host specified by hostID from the topology.",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts/:hostID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts",
												":hostID"
											],
											"variable": [
												{
													"key": "hostID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get a host with id of hostID from the topology.If the hostID is set to localhost then the host that running the Node Manager that this API is running on is returned."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/hosts/:hostID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"hosts",
														":hostID"
													],
													"variable": [
														{
															"key": "hostID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Delete the host specified by hostID from the topology",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts/:hostID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts",
												":hostID"
											],
											"variable": [
												{
													"key": "hostID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete a host from the topology."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/hosts/:hostID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"hosts",
														":hostID"
													],
													"variable": [
														{
															"key": "hostID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all hosts",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"hosts"
									]
								},
								"description": "Get all hosts in the topology"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Add a host.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"hosts"
									]
								},
								"description": "Add a host to the topology"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update the name of a host.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"hosts"
									]
								},
								"description": "Update the name of a host.The id cannot be updated."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a host id.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/hosts/id?hostName=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"hosts",
										"id"
									],
									"query": [
										{
											"key": "hostName",
											"value": "<String>"
										}
									]
								},
								"description": "Get a host id."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/hosts/id?hostName=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"hosts",
												"id"
											],
											"query": [
												{
													"key": "hostName",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "groups",
					"item": [
						{
							"name": "{group ID}",
							"item": [
								{
									"name": "lock",
									"item": [
										{
											"name": "Lock a Group for exclusive access.",
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/topology/groups/:groupID/lock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"groups",
														":groupID",
														"lock"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Lock a Group for exclusive access by a user. Once locked, only the locking user can deploy configuration to the Group or Server instances under the Group. Equally, only the locking user can modify the Group. Only the original locker can unlock the Group, or another user with sufficient privileges to force an unlock of the Group, usually a user with an Administrator role in their user privileges.The lock which gets generated has the username and timestamp of when it was created and is a sub-object of the Group."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/topology/groups/:groupID/lock",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"topology",
																"groups",
																":groupID",
																"lock"
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Force the unlocking of a Group irrespective of the original locker.",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/topology/groups/:groupID/lock",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"groups",
														":groupID",
														"lock"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Force the unlocking of a Group for exclusive access, irrespective of the original locker. Typically only users with administrative access can call this, as defined in the RBAC configuration."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/topology/groups/:groupID/lock",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"topology",
																"groups",
																":groupID",
																"lock"
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Unlock a Group for exclusive access.",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/topology/groups/:groupID/lock/:userID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"groups",
														":groupID",
														"lock",
														":userID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "userID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Unlock a Group for exclusive access by a user. Only the original locker can unlock the Group, or another user with sufficient privileges to force an unlock of the Group, usually a user with an Administrator role in their user privileges.The userID specified should match the original locker ID and also must be the requesting user's authentication identity. This means that a user cannot request an unlocking for another user."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/topology/groups/:groupID/lock/:userID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"topology",
																"groups",
																":groupID",
																"lock",
																":userID"
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "userID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get the group specified by groupID",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/groups/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get the group specified by groupID from the topology."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/groups/:groupID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"groups",
														":groupID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"tags\": {\n      \"culpa61b\": \"<string>\",\n      \"eu_2\": \"<string>\"\n    },\n    \"services\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"type\": \"<string>\",\n        \"scheme\": \"<string>\",\n        \"hostID\": \"<string>\",\n        \"managementPort\": \"<integer>\",\n        \"tags\": {\n          \"sit8d\": \"<string>\"\n        },\n        \"enabled\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"type\": \"<string>\",\n        \"scheme\": \"<string>\",\n        \"hostID\": \"<string>\",\n        \"managementPort\": \"<integer>\",\n        \"tags\": {\n          \"idcae\": \"<string>\",\n          \"mollitac1\": \"<string>\"\n        },\n        \"enabled\": \"<boolean>\"\n      }\n    ],\n    \"lock\": {\n      \"locker\": \"<string>\",\n      \"timestamp\": \"<long>\"\n    }\n  }\n}"
										}
									]
								},
								{
									"name": "Delete the group specified by groupID",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/topology/groups/:groupID?deleteDiskGroup=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups",
												":groupID"
											],
											"query": [
												{
													"key": "deleteDiskGroup",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Delete the group specified by groupID from the topology."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/groups/:groupID?deleteDiskGroup=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"groups",
														":groupID"
													],
													"query": [
														{
															"key": "deleteDiskGroup",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Get all groups in the Topology.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"groups"
									]
								},
								"description": "Get all groups in the topology The group of Node Managers is also returned."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"sit725\": \"<string>\",\n        \"labore__\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"reprehenderit_ede\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"ex_0d\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"exercitationb97\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"incididunt_5\": \"<string>\",\n            \"nisi_f\": \"<string>\",\n            \"reprehenderit518\": \"<string>\",\n            \"Lorem_e\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"Ut_6a2\": \"<string>\",\n            \"non3\": \"<string>\",\n            \"commodo4\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Adds an empty group to the Topology.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"tags\": {\n    \"adipisicingf\": \"<string>\"\n  },\n  \"services\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"cillum_d60\": \"<string>\",\n        \"aliquip_c\": \"<string>\",\n        \"ead\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"laboris96\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ],\n  \"lock\": {\n    \"locker\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"groups"
									]
								},
								"description": "This method adds an empty group to the topology.No group-related files are written to the disk of any host in the domain until a new API Server instance is added to the group"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a group's tags or name.",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"tags\": {\n    \"adipisicingf\": \"<string>\"\n  },\n  \"services\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"cillum_d60\": \"<string>\",\n        \"aliquip_c\": \"<string>\",\n        \"ead\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"laboris96\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ],\n  \"lock\": {\n    \"locker\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"groups"
									]
								},
								"description": "This method may be used to update a group's tags, or name only.If a new set of services is passed they will be ignored and the original services kept. A group's set of services is updated via POST /api/topology/services/{groupID} and DELETE /api/topology/groups/{groupID}.The id cannot be updated."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a group id.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/groups/id?groupName=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"groups",
										"id"
									],
									"query": [
										{
											"key": "groupName",
											"value": "<String>"
										}
									]
								},
								"description": "Get a group id."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/groups/id?groupName=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"groups",
												"id"
											],
											"query": [
												{
													"key": "groupName",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "diskinstance",
					"item": [
						{
							"name": "instance",
							"item": [
								{
									"name": "/topology/diskinstance/instance",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"instance\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"in_e\": \"<string>\",\n      \"sint57\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"archive\": {\n    \"rootProperties\": {\n      \"occaecat3\": \"occaecat\",\n      \"labore_e_\": \"ut ipsum\"\n    },\n    \"policyProperties\": {\n      \"adipisicing4\": \"officia occaecat ut ipsum in\"\n    },\n    \"environmentProperties\": {\n      \"occaecat_6\": \"eu occaecat ipsum\",\n      \"occaecat_b\": \"E\",\n      \"occaecat_6d\": \"ut adipisicing quis\"\n    },\n    \"data\": [\n      \"amet dolor\",\n      \"occ\"\n    ]\n  },\n  \"passphrase\": \"deserunt\",\n  \"keyPassphrase\": \"cupidatat labore\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/diskinstance/instance?certificate=veniam incididunt elit aliqua&certificate=elit magna ullamco minim&servicePort=-42651681&domainID=<String>&groupID=<String>&groupName=<String>&initFirstGatewayWithYaml=false&create=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"diskinstance",
												"instance"
											],
											"query": [
												{
													"key": "certificate",
													"value": "veniam incididunt elit aliqua"
												},
												{
													"key": "certificate",
													"value": "elit magna ullamco minim"
												},
												{
													"key": "servicePort",
													"value": "-42651681"
												},
												{
													"key": "domainID",
													"value": "<String>"
												},
												{
													"key": "groupID",
													"value": "<String>"
												},
												{
													"key": "groupName",
													"value": "<String>"
												},
												{
													"key": "initFirstGatewayWithYaml",
													"value": "false"
												},
												{
													"key": "create",
													"value": "false"
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"instance\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"amet9e\": \"<string>\",\n      \"in7b3\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"archive\": {\n    \"rootProperties\": {\n      \"voluptate_321\": \"<string>\",\n      \"pariatur2\": \"<string>\",\n      \"eiusmodc8\": \"<string>\",\n      \"non__8\": \"<string>\"\n    },\n    \"policyProperties\": {\n      \"in4\": \"<string>\"\n    },\n    \"environmentProperties\": {\n      \"ipsume24\": \"<string>\"\n    },\n    \"data\": [\n      \"<byte>\",\n      \"<byte>\"\n    ]\n  },\n  \"passphrase\": \"<string>\",\n  \"keyPassphrase\": \"<string>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/topology/diskinstance/instance?certificate=<string>&certificate=<string>&servicePort=<integer>&domainID=<string>&groupID=<string>&groupName=<string>&initFirstGatewayWithYaml=false&create=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"diskinstance",
														"instance"
													],
													"query": [
														{
															"key": "certificate",
															"value": "<string>"
														},
														{
															"key": "certificate",
															"value": "<string>"
														},
														{
															"key": "servicePort",
															"value": "<integer>"
														},
														{
															"key": "domainID",
															"value": "<string>"
														},
														{
															"key": "groupID",
															"value": "<string>"
														},
														{
															"key": "groupName",
															"value": "<string>"
														},
														{
															"key": "initFirstGatewayWithYaml",
															"value": "false"
														},
														{
															"key": "create",
															"value": "false"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/topology/diskinstance/instance",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/topology/diskinstance/instance?serviceID=<String>&serviceName=<String>&groupID=<String>&groupName=<String>&deleteGroupArchives=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"diskinstance",
												"instance"
											],
											"query": [
												{
													"key": "serviceID",
													"value": "<String>"
												},
												{
													"key": "serviceName",
													"value": "<String>"
												},
												{
													"key": "groupID",
													"value": "<String>"
												},
												{
													"key": "groupName",
													"value": "<String>"
												},
												{
													"key": "deleteGroupArchives",
													"value": "false"
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/diskinstance/instance?serviceID=<string>&serviceName=<string>&groupID=<string>&groupName=<string>&deleteGroupArchives=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"diskinstance",
														"instance"
													],
													"query": [
														{
															"key": "serviceID",
															"value": "<string>"
														},
														{
															"key": "serviceName",
															"value": "<string>"
														},
														{
															"key": "groupID",
															"value": "<string>"
														},
														{
															"key": "groupName",
															"value": "<string>"
														},
														{
															"key": "deleteGroupArchives",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/topology/diskinstance/instance/csr",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"cillum_4_\": \"<string>\",\n      \"anim_d5a\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"keyPassphrase\": \"quis\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/diskinstance/instance/csr?groupID=<String>&groupName=<String>&hostID=<String>&subjAltName=veniam incididunt elit aliqua&subjAltName=elit magna ullamco minim&signAlg=sha1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"diskinstance",
												"instance",
												"csr"
											],
											"query": [
												{
													"key": "groupID",
													"value": "<String>"
												},
												{
													"key": "groupName",
													"value": "<String>"
												},
												{
													"key": "hostID",
													"value": "<String>"
												},
												{
													"key": "subjAltName",
													"value": "veniam incididunt elit aliqua"
												},
												{
													"key": "subjAltName",
													"value": "elit magna ullamco minim"
												},
												{
													"key": "signAlg",
													"value": "sha1"
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/diskinstance/instance/csr?groupID=<string>&groupName=<string>&hostID=<string>&subjAltName=<string>&subjAltName=<string>&signAlg=sha1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"diskinstance",
														"instance",
														"csr"
													],
													"query": [
														{
															"key": "groupID",
															"value": "<string>"
														},
														{
															"key": "groupName",
															"value": "<string>"
														},
														{
															"key": "hostID",
															"value": "<string>"
														},
														{
															"key": "subjAltName",
															"value": "<string>"
														},
														{
															"key": "subjAltName",
															"value": "<string>"
														},
														{
															"key": "signAlg",
															"value": "sha1"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "group/{group ID}",
							"item": [
								{
									"name": "/topology/diskinstance/group/:groupID",
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/topology/diskinstance/group/:groupID?name=<String>&create=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"diskinstance",
												"group",
												":groupID"
											],
											"query": [
												{
													"key": "name",
													"value": "<String>"
												},
												{
													"key": "create",
													"value": "false"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/diskinstance/group/:groupID?name=<string>&create=false",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"diskinstance",
														"group",
														":groupID"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "create",
															"value": "false"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "/topology/diskinstance/group/:groupID",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/topology/diskinstance/group/:groupID?name=<String>&serviceName=veniam incididunt elit aliqua&serviceName=elit magna ullamco minim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"diskinstance",
												"group",
												":groupID"
											],
											"query": [
												{
													"key": "name",
													"value": "<String>"
												},
												{
													"key": "serviceName",
													"value": "veniam incididunt elit aliqua"
												},
												{
													"key": "serviceName",
													"value": "elit magna ullamco minim"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/diskinstance/group/:groupID?name=<string>&serviceName=<string>&serviceName=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"diskinstance",
														"group",
														":groupID"
													],
													"query": [
														{
															"key": "name",
															"value": "<string>"
														},
														{
															"key": "serviceName",
															"value": "<string>"
														},
														{
															"key": "serviceName",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "services",
					"item": [
						{
							"name": "{group ID}",
							"item": [
								{
									"name": "{service ID}",
									"item": [
										{
											"name": "Get the service specified by serviceID from the group specified by groupID.",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID/:serviceID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID",
														":serviceID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "serviceID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Get a service with an id of serviceID in group with id of groupID from the topology."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/topology/services/:groupID/:serviceID",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"topology",
																"services",
																":groupID",
																":serviceID"
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "serviceID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"exercitation_4\": \"<string>\",\n      \"nisi_\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  }\n}"
												}
											]
										},
										{
											"name": "Delete a service from the topology.",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID/:serviceID?deleteDiskInstance=true&propagateTopology=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID",
														":serviceID"
													],
													"query": [
														{
															"key": "deleteDiskInstance",
															"value": "true"
														},
														{
															"key": "propagateTopology",
															"value": "true"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														},
														{
															"key": "serviceID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												},
												"description": "Delete a service from the topology."
											},
											"response": [
												{
													"name": "successful operation",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: basic",
																"key": "Authorization",
																"value": "Basic <credentials>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/topology/services/:groupID/:serviceID?deleteDiskInstance=true&propagateTopology=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"topology",
																"services",
																":groupID",
																":serviceID"
															],
															"query": [
																{
																	"key": "deleteDiskInstance",
																	"value": "true"
																},
																{
																	"key": "propagateTopology",
																	"value": "true"
																}
															],
															"variable": [
																{
																	"key": "groupID",
																	"value": "<String>",
																	"description": "(Required) "
																},
																{
																	"key": "serviceID",
																	"value": "<String>",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "Get all services in a group",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/services/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Get all services in the group specified by groupID."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"ut2f8\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"amet_f_\": \"<string>\",\n        \"sint1_\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}"
										}
									]
								},
								{
									"name": "Adds a service (e.g. API Server instance) to the Topology",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"consequat_bfe\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"passphrase\": \"elit laborum nostrud aute\",\n  \"domainPassphrase\": \"magna offic\",\n  \"keyPassphrase\": \"nostrud deserunt sit Duis\",\n  \"initFirstGatewayWithYaml\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/services/:groupID?servicesPort=8080&signAlg=sha1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												":groupID"
											],
											"query": [
												{
													"key": "servicesPort",
													"value": "8080"
												},
												{
													"key": "signAlg",
													"value": "sha1"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "This method adds a service to the Topology. A service is an API Server instance, or Node Manager.When a new API Server instance is added, new files will be created on disk for the new instance."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"Ut62\": \"<string>\",\n      \"proident_eec\": \"<string>\",\n      \"voluptate_6\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"passphrase\": \"<string>\",\n  \"domainPassphrase\": \"<string>\",\n  \"keyPassphrase\": \"<string>\",\n  \"initFirstGatewayWithYaml\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID?servicesPort=8080&signAlg=sha1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID"
													],
													"query": [
														{
															"key": "servicesPort",
															"value": "8080"
														},
														{
															"key": "signAlg",
															"value": "sha1"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update a service name, tags, management port, etc",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"scheme\": \"<string>\",\n  \"hostID\": \"<string>\",\n  \"managementPort\": \"<integer>\",\n  \"tags\": {\n    \"deserunt_92\": \"<string>\"\n  },\n  \"enabled\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/services/:groupID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												":groupID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "This method may be used to update a service's name, tags, management port, or scheme.A service is an API Server instance, or Node Manager.The id or type cannot be updated."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"type\": \"<string>\",\n  \"scheme\": \"<string>\",\n  \"hostID\": \"<string>\",\n  \"managementPort\": \"<integer>\",\n  \"tags\": {\n    \"exercitation4\": \"<string>\",\n    \"ea2\": \"<string>\"\n  },\n  \"enabled\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID"
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create a private key and CSR for SSL communications for an API Gateway",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"cillum_4_\": \"<string>\",\n      \"anim_d5a\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"keyPassphrase\": \"quis\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/services/:groupID/csr?servicesPort=8080&signAlg=sha1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												":groupID",
												"csr"
											],
											"query": [
												{
													"key": "servicesPort",
													"value": "8080"
												},
												{
													"key": "signAlg",
													"value": "sha1"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "Generate a private key and CSR (Certificate Sign Request) for an instance.The CSR may be taken offline so that an external CA can create the signed certificate, or the CSR may be sent back to the Admin Node Manager where the domain private key resides in order to create the signed certificate.This method is called by a client application (e.g. managedomain), on an Admin Node Manager when a new instance is being created."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID/csr?servicesPort=8080&signAlg=sha1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID",
														"csr"
													],
													"query": [
														{
															"key": "servicesPort",
															"value": "8080"
														},
														{
															"key": "signAlg",
															"value": "sha1"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
										}
									]
								},
								{
									"name": "Adds a service (e.g. API Server instance) to the Topology",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"sintf_6\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"passphrase\": \"exercitation enim\",\n  \"keyPassphrase\": \"tempor ipsum Excepteur do sed\",\n  \"initFirstGatewayWithYaml\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/services/:groupID/withcert?servicesPort=8080&certificate=veniam incididunt elit aliqua&certificate=elit magna ullamco minim",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												":groupID",
												"withcert"
											],
											"query": [
												{
													"key": "servicesPort",
													"value": "8080"
												},
												{
													"key": "certificate",
													"value": "veniam incididunt elit aliqua"
												},
												{
													"key": "certificate",
													"value": "elit magna ullamco minim"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										},
										"description": "This method adds a service to the Topology. A service is an API Server instance, or Node Manager. When a new API Server instance is added, new files will be created on disk for the new instance.The certificates for the new instance or Node Manager are passed to this method. The certificate has been signed either by 1) an Admin Node Manager with the domain private key, or, 2) managedomain using a user-provided domain private key, or 3) an external CA that was sent the CSR (Certificate Sign Request) generated in a previous API call."
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: basic",
														"key": "Authorization",
														"value": "Basic <credentials>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"service\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"type\": \"<string>\",\n    \"scheme\": \"<string>\",\n    \"hostID\": \"<string>\",\n    \"managementPort\": \"<integer>\",\n    \"tags\": {\n      \"tempor2\": \"<string>\",\n      \"in_3a\": \"<string>\",\n      \"laborum_d9_\": \"<string>\"\n    },\n    \"enabled\": \"<boolean>\"\n  },\n  \"passphrase\": \"<string>\",\n  \"keyPassphrase\": \"<string>\",\n  \"initFirstGatewayWithYaml\": \"<boolean>\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/topology/services/:groupID/withcert?servicesPort=8080&certificate=<string>&certificate=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"topology",
														"services",
														":groupID",
														"withcert"
													],
													"query": [
														{
															"key": "servicesPort",
															"value": "8080"
														},
														{
															"key": "certificate",
															"value": "<string>"
														},
														{
															"key": "certificate",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "groupID",
															"value": "<String>",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Create a signed certificate for SSL communications",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"domainPassphrase\": \"id ad in magna mollit\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/services/sign?csr=<String>&signAlg=sha1&tryRemoteANMs=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"services",
										"sign"
									],
									"query": [
										{
											"key": "csr",
											"value": "<String>"
										},
										{
											"key": "signAlg",
											"value": "sha1"
										},
										{
											"key": "tryRemoteANMs",
											"value": "true"
										}
									]
								},
								"description": "Create a signed certificate for SSL communications"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"domainPassphrase\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/services/sign?csr=<string>&signAlg=sha1&tryRemoteANMs=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												"sign"
											],
											"query": [
												{
													"key": "csr",
													"value": "<string>"
												},
												{
													"key": "signAlg",
													"value": "sha1"
												},
												{
													"key": "tryRemoteANMs",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
								}
							]
						},
						{
							"name": "Get a service id.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/services/id/:groupID?serviceName=<String>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"services",
										"id",
										":groupID"
									],
									"query": [
										{
											"key": "serviceName",
											"value": "<String>"
										}
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get a service id."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/services/id/:groupID?serviceName=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												"id",
												":groupID"
											],
											"query": [
												{
													"key": "serviceName",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get the status of the specified service.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/topology/services/status/:groupID/:serviceID",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"services",
										"status",
										":groupID",
										":serviceID"
									],
									"variable": [
										{
											"key": "groupID",
											"value": "<String>",
											"description": "(Required) "
										},
										{
											"key": "serviceID",
											"value": "<String>",
											"description": "(Required) "
										}
									]
								},
								"description": "Get the status of the specified service."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/services/status/:groupID/:serviceID",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"services",
												"status",
												":groupID",
												":serviceID"
											],
											"variable": [
												{
													"key": "groupID",
													"value": "<String>",
													"description": "(Required) "
												},
												{
													"key": "serviceID",
													"value": "<String>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "passphrasepolicy",
					"item": [
						{
							"name": "Returns the current passphrase policy for node managers or groups.",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/passphrasepolicy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"passphrasepolicy"
									]
								},
								"description": "Returns the current passphrase policy for node managers or groups."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"enabled\": \"<boolean>\",\n    \"assertions\": [\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      },\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      }\n    ],\n    \"version\": \"<integer>\",\n    \"dataVersion\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  },\n  {\n    \"enabled\": \"<boolean>\",\n    \"assertions\": [\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      },\n      {\n        \"description\": \"<string>\",\n        \"matchCount\": \"<string>\",\n        \"enabled\": \"<boolean>\",\n        \"assertion\": [\n          {\n            \"enabled\": \"<boolean>\"\n          },\n          {\n            \"enabled\": \"<boolean>\"\n          }\n        ]\n      }\n    ],\n    \"version\": \"<integer>\",\n    \"dataVersion\": \"<string>\",\n    \"timestamp\": \"<long>\"\n  }\n]"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Save passphrase policy for node managers or groups on disk",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": false,\n  \"assertions\": [\n    {\n      \"description\": \"password composition\",\n      \"matchCount\": \"*\",\n      \"enabled\": true,\n      \"assertion\": [\n        {\n          \"enabled\": false\n        },\n        {\n          \"enabled\": false\n        }\n      ]\n    },\n    {\n      \"description\": \"password composition\",\n      \"matchCount\": \"*\",\n      \"enabled\": true,\n      \"assertion\": [\n        {\n          \"enabled\": false\n        },\n        {\n          \"enabled\": false\n        }\n      ]\n    }\n  ],\n  \"version\": 1,\n  \"dataVersion\": \"7.4.1\",\n  \"timestamp\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/passphrasepolicy?propagateStore=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"passphrasepolicy"
									],
									"query": [
										{
											"key": "propagateStore",
											"value": "true"
										}
									]
								},
								"description": "Save passphrase policy for node managers or groups on disk"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"description\": \"<string>\",\n  \"matchCount\": \"<string>\",\n  \"enabled\": \"<boolean>\",\n  \"assertion\": [\n    {\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enabled\": \"<boolean>\",\n  \"assertions\": [\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    },\n    {\n      \"description\": \"<string>\",\n      \"matchCount\": \"<string>\",\n      \"enabled\": \"<boolean>\",\n      \"assertion\": [\n        {\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"enabled\": \"<boolean>\"\n        }\n      ]\n    }\n  ],\n  \"version\": \"<integer>\",\n  \"dataVersion\": \"<string>\",\n  \"timestamp\": \"<long>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/topology/passphrasepolicy?propagateStore=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"passphrasepolicy"
											],
											"query": [
												{
													"key": "propagateStore",
													"value": "true"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "emt",
					"item": [
						{
							"name": "Register E-Gateway in the topology.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"groupName\": \"proident magna sit reprehenderit\",\n  \"instanceID\": \"Lorem do\",\n  \"hostAddress\": \"occaecat labore voluptate sed\",\n  \"hostPort\": -36457743,\n  \"productVersion\": \"ipsum Ut commodo in non\",\n  \"image\": \"quis tempor\",\n  \"parentHostID\": \"ut ips\",\n  \"parentCpuCores\": 44833001,\n  \"licensedFeatures\": [\n    \"velit labore voluptate ullamco do\",\n    \"dolore minim in non\"\n  ],\n  \"transactions\": -87227324,\n  \"andClearTransactions\": 79558631\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/emt/registergateway",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"emt",
										"registergateway"
									]
								},
								"description": "Add E-Gateway to topology if it does not exist. A host and group are created as required. If already exists then this is an indication that the E-Gateway is still running."
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/emt/registergateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"emt",
												"registergateway"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a service from the topology.",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"groupName\": \"cupidatat adipisicing eu proident\",\n  \"instanceID\": \"occaecat amet enim\",\n  \"hostAddress\": \"elit ut\",\n  \"hostPort\": 34102639,\n  \"productVersion\": \"sed ex\",\n  \"image\": \"non mollit\",\n  \"parentHostID\": \"laboris consectetur commodo nostrud\",\n  \"parentCpuCores\": -20766348,\n  \"licensedFeatures\": [\n    \"nostrud\",\n    \"adipisicing proident Lorem dolor ad\"\n  ],\n  \"transactions\": -76930168,\n  \"andClearTransactions\": 77603335\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/topology/emt/deregistergateway",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"emt",
										"deregistergateway"
									]
								},
								"description": "Delete a service from the topology. Host and Group are deleted if now empty"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: basic",
												"key": "Authorization",
												"value": "Basic <credentials>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/topology/emt/deregistergateway",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"topology",
												"emt",
												"deregistergateway"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "/topology",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/topology?serviceType=nodemanager&serviceType=gateway",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology"
							],
							"query": [
								{
									"key": "serviceType",
									"value": "nodemanager",
									"description": "Available values : gateway, nodemanager"
								},
								{
									"key": "serviceType",
									"value": "gateway",
									"description": "Available values : gateway, nodemanager"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology?serviceType=<string>&serviceType=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology"
									],
									"query": [
										{
											"key": "serviceType",
											"value": "<string>"
										},
										{
											"key": "serviceType",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": {\n    \"id\": \"<string>\",\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\",\n    \"productVersion\": \"<string>\",\n    \"hosts\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"groups\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"tags\": {\n          \"ea_1\": \"<string>\",\n          \"in568\": \"<string>\"\n        },\n        \"services\": [\n          {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"scheme\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hostID\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"managementPort\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"tags\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"enabled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"scheme\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hostID\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"managementPort\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"tags\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"enabled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"lock\": {\n          \"locker\": \"<string>\",\n          \"timestamp\": \"<long>\"\n        }\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"tags\": {\n          \"temporf3\": \"<string>\",\n          \"laborum_7\": \"<string>\"\n        },\n        \"services\": [\n          {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"scheme\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hostID\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"managementPort\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"tags\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"enabled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"id\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"name\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"type\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"scheme\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"hostID\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"managementPort\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"tags\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            },\n            \"enabled\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"lock\": {\n          \"locker\": \"<string>\",\n          \"timestamp\": \"<long>\"\n        }\n      }\n    ],\n    \"uniqueIdCounters\": {\n      \"cupidatat_e\": \"<integer>\",\n      \"in3\": \"<integer>\",\n      \"laborec\": \"<integer>\"\n    },\n    \"emtEnabled\": \"<boolean>\",\n    \"services\": [\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"type\": \"<string>\",\n        \"scheme\": \"<string>\",\n        \"hostID\": \"<string>\",\n        \"managementPort\": \"<integer>\",\n        \"tags\": {\n          \"Duis__6\": \"<string>\"\n        },\n        \"enabled\": \"<boolean>\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"name\": \"<string>\",\n        \"type\": \"<string>\",\n        \"scheme\": \"<string>\",\n        \"hostID\": \"<string>\",\n        \"managementPort\": \"<integer>\",\n        \"tags\": {\n          \"dolor2\": \"<string>\",\n          \"aliqua6\": \"<string>\",\n          \"amete3\": \"<string>\"\n        },\n        \"enabled\": \"<boolean>\"\n      }\n    ]\n  }\n}"
						}
					]
				},
				{
					"name": "/topology",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<string>\",\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\",\n  \"productVersion\": \"<string>\",\n  \"hosts\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"groups\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"sitb\": \"<string>\",\n        \"ut1\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"culpa_431\": \"<string>\",\n            \"dolor_9\": \"<string>\",\n            \"voluptate7\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"eu96\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"aliqua_63c\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"ex_d07\": \"<string>\",\n            \"essec\": \"<string>\",\n            \"nostrude0\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"culpaf7d\": \"<string>\",\n            \"deseruntd3c\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"cillum_95\": \"<integer>\",\n    \"proident_0c4\": \"<integer>\"\n  },\n  \"emtEnabled\": \"<boolean>\",\n  \"services\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"dolor_4e\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"sit5e6\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/topology?detectConflict=true&commit=false&propagateTopology=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology"
							],
							"query": [
								{
									"key": "detectConflict",
									"value": "true"
								},
								{
									"key": "commit",
									"value": "false"
								},
								{
									"key": "propagateTopology",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology?detectConflict=true&commit=false&propagateTopology=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology"
									],
									"query": [
										{
											"key": "detectConflict",
											"value": "true"
										},
										{
											"key": "commit",
											"value": "false"
										},
										{
											"key": "propagateTopology",
											"value": "true"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get the next topology id of a certain type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/topology/id?type=Host",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology",
								"id"
							],
							"query": [
								{
									"key": "type",
									"value": "Host",
									"description": "Available values : Host, Group, Gateway, NodeManager"
								}
							]
						},
						"description": "Get the next host, group, gateway, or node manager id in the topology and return it. This results in a topology update.This is used before the CSR (Certificate Sign Request) is generated in managedomain, when Node Managers are being added to a domain."
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/id?type=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"id"
									],
									"query": [
										{
											"key": "type",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"errors\": [\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    },\n    {\n      \"code\": \"<integer>\",\n      \"message\": \"<string>\"\n    }\n  ],\n  \"result\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Merges a snippet of a Topology into the main Domain Topology",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"<string>\",\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\",\n  \"productVersion\": \"<string>\",\n  \"hosts\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"groups\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"sitb\": \"<string>\",\n        \"ut1\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"culpa_431\": \"<string>\",\n            \"dolor_9\": \"<string>\",\n            \"voluptate7\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"eu96\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"aliqua_63c\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"ex_d07\": \"<string>\",\n            \"essec\": \"<string>\",\n            \"nostrude0\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"culpaf7d\": \"<string>\",\n            \"deseruntd3c\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"cillum_95\": \"<integer>\",\n    \"proident_0c4\": \"<integer>\"\n  },\n  \"emtEnabled\": \"<boolean>\",\n  \"services\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"dolor_4e\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"sit5e6\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/topology/merge",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology",
								"merge"
							]
						},
						"description": "Used to merge a snippet of a Topology or a Host specific topology into the Domain Topology. The main use is to re-add a Host which may have temporarily removed from the Topology (either due to Host or Network failure). Note that it is assumed that Topology snippet being merged refereces Hosts, Groups and Instances which have allready been configured and established previously. No disk changes are made when loading this change."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/merge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"merge"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\",\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\",\n  \"productVersion\": \"<string>\",\n  \"hosts\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"groups\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"nisif\": \"<string>\",\n        \"aliqua_b92\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"labore_ae\": \"<string>\",\n            \"culpa7\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"fugiatdee\": \"<string>\",\n            \"exd\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"tags\": {\n        \"laborefb2\": \"<string>\",\n        \"veniam15f\": \"<string>\",\n        \"ipsumb5\": \"<string>\",\n        \"do_13\": \"<string>\",\n        \"aute_b76\": \"<string>\"\n      },\n      \"services\": [\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"laborum_5\": \"<string>\",\n            \"occaecat66e\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<string>\",\n          \"name\": \"<string>\",\n          \"type\": \"<string>\",\n          \"scheme\": \"<string>\",\n          \"hostID\": \"<string>\",\n          \"managementPort\": \"<integer>\",\n          \"tags\": {\n            \"Excepteur_6bd\": \"<string>\",\n            \"et_a\": \"<string>\"\n          },\n          \"enabled\": \"<boolean>\"\n        }\n      ],\n      \"lock\": {\n        \"locker\": \"<string>\",\n        \"timestamp\": \"<long>\"\n      }\n    }\n  ],\n  \"uniqueIdCounters\": {\n    \"deserunt_98\": \"<integer>\",\n    \"in_c\": \"<integer>\"\n  },\n  \"emtEnabled\": \"<boolean>\",\n  \"services\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"ea_107\": \"<string>\",\n        \"sunt_344\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"type\": \"<string>\",\n      \"scheme\": \"<string>\",\n      \"hostID\": \"<string>\",\n      \"managementPort\": \"<integer>\",\n      \"tags\": {\n        \"dolore_49\": \"<string>\"\n      },\n      \"enabled\": \"<boolean>\"\n    }\n  ]\n}"
						},
						{
							"name": "Conflict",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/merge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"merge"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/merge",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"merge"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Returns the Status of All NodeManagers in the domain.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/topology/domainStatus?refresh=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology",
								"domainStatus"
							],
							"query": [
								{
									"key": "refresh",
									"value": "true",
									"description": "Set the refresh parameter to true will contact each NM for update. Otherwise the latest DomainStatus is returned. Default is true."
								}
							]
						},
						"description": "Returns the state of the Node Managers in the domain, giving their installed topology version and admin user store version (if applicable). Shows overall status of the domain, i.e. if all Node Managers can be contacted and are up to date."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/domainStatus?refresh=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"domainStatus"
									],
									"query": [
										{
											"key": "refresh",
											"value": "true"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"timestamp\": \"<long>\",\n  \"disrupted\": \"<boolean>\",\n  \"topologyInSync\": \"<boolean>\",\n  \"adminUsersInSync\": \"<boolean>\",\n  \"nodes\": {\n    \"incididunt4\": {\n      \"topologyInSync\": \"<boolean>\",\n      \"adminUsersInSync\": \"<boolean>\",\n      \"groupSettingsInSync\": \"<boolean>\",\n      \"topologyVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"adminUsersVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"groupSettingsVersion\": {\n        \"version\": \"<long>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"lastContact\": \"<long>\",\n      \"topologyRank\": \"<integer>\",\n      \"adminUsersRank\": \"<integer>\",\n      \"admin\": \"<boolean>\",\n      \"alive\": \"<boolean>\",\n      \"serviceId\": \"<string>\"\n    },\n    \"eu_9\": {\n      \"topologyInSync\": \"<boolean>\",\n      \"adminUsersInSync\": \"<boolean>\",\n      \"groupSettingsInSync\": \"<boolean>\",\n      \"topologyVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"adminUsersVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"groupSettingsVersion\": {\n        \"version\": \"<long>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"lastContact\": \"<long>\",\n      \"topologyRank\": \"<integer>\",\n      \"adminUsersRank\": \"<integer>\",\n      \"admin\": \"<boolean>\",\n      \"alive\": \"<boolean>\",\n      \"serviceId\": \"<string>\"\n    },\n    \"nisid6\": {\n      \"topologyInSync\": \"<boolean>\",\n      \"adminUsersInSync\": \"<boolean>\",\n      \"groupSettingsInSync\": \"<boolean>\",\n      \"topologyVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"adminUsersVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"groupSettingsVersion\": {\n        \"version\": \"<long>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"lastContact\": \"<long>\",\n      \"topologyRank\": \"<integer>\",\n      \"adminUsersRank\": \"<integer>\",\n      \"admin\": \"<boolean>\",\n      \"alive\": \"<boolean>\",\n      \"serviceId\": \"<string>\"\n    },\n    \"irure_c\": {\n      \"topologyInSync\": \"<boolean>\",\n      \"adminUsersInSync\": \"<boolean>\",\n      \"groupSettingsInSync\": \"<boolean>\",\n      \"topologyVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"adminUsersVersion\": {\n        \"version\": \"<integer>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"groupSettingsVersion\": {\n        \"version\": \"<long>\",\n        \"timestamp\": \"<long>\"\n      },\n      \"lastContact\": \"<long>\",\n      \"topologyRank\": \"<integer>\",\n      \"adminUsersRank\": \"<integer>\",\n      \"admin\": \"<boolean>\",\n      \"alive\": \"<boolean>\",\n      \"serviceId\": \"<string>\"\n    }\n  },\n  \"newestTopologyVersion\": {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  },\n  \"newestAdminUsersVersion\": {\n    \"version\": \"<integer>\",\n    \"timestamp\": \"<long>\"\n  },\n  \"newestGroupSettingsVersion\": {\n    \"version\": \"<long>\",\n    \"timestamp\": \"<long>\"\n  }\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/domainStatus?refresh=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"domainStatus"
									],
									"query": [
										{
											"key": "refresh",
											"value": "true"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Returns the FIPS mode status for the instance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/topology/fips",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology",
								"fips"
							]
						},
						"description": "Returns the status of the FIPS mode for the Domain, the setting for the Instance, and the current running mode"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/fips",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"fips"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/fips",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"fips"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get the Topology version.",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/topology/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"topology",
								"version"
							]
						},
						"description": "Returns the the topology version (version and timestamp) as the result on a successful operation"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"version"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"<integer>\",\n  \"timestamp\": \"<long>\"\n}"
						},
						{
							"name": "Internal Server Error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/topology/version",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"topology",
										"version"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://{{apimHost}}:{{apiGatewayManagerPort}}/api",
			"type": "string"
		}
	]
}